@using Syncfusion.JavaScript
@using System.Collections.Generic
@using System.Linq


@model IEnumerable<syncfusion_payc.Models.FACTURAS>

@{
    /**/

    ViewBag.Title = "";

    syncfusion_payc.Models.test_payc_contabilidadEntities db = new syncfusion_payc.Models.test_payc_contabilidadEntities();
    long id = (long)ViewBag.COD_FACTURA;
    long cp = (long)ViewBag.COD_CONTRATO_PROYECTO;
}

@if (User.Identity.IsAuthenticated)
{
    <h4>DESCRIPCION PROYECTO: @Html.ViewBag.DESCRIPCION_PROYECTO - PERIODO:@Html.ViewBag.PERIODO_FACTURAR</h4>

    <div class="control-section">
        @{
            Html.EJ().Tab("SETTINGSTABS").Items(data =>
            {
                data.Add().ID("EDICION_MANUAL").Text("EDICION_MANUAL").ContentTemplate(
@<div class="e-tab">
    


</div>);
          data.Add().ID("AÑADIR_OTRAS_FACTURAS").Text("AÑADIR OTRAS FACTURAS").ContentTemplate(
@<div>
    <!--FILA CONTENEDORES DRAG AND DROP-->
    <div class="row">
        <!--CONTENEDOR FACTURAS ANTERIORES -->
        <div class="col-md-5 contenedor_facturas_ant">

            <H4>ITEMS MES ANTERIOR POR AGREGAR</H4>

            <label>MESES ANTERIORES</label>
            @*LOOP GENERACIÓN DROPDOWN FECHAS FACTURA*@
            <div class="dropdown">

                <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    SELECCIONAR FECHA
                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                    @foreach (var c in db.DETALLE_FACTURA_ITEMPERS.Where(u => u.COD_CONTRATO_PROYECTO == cp && u.COD_FACTURA != null && u.COD_FACTURA != id).Select(x => new { x.COD_FORMAS_PAGO_FECHAS, x.PERIODO_FACTURA }).Distinct().ToList())
                        {

                        <button class="dropdown-item" onclick="cambio_mes(@c.COD_FORMAS_PAGO_FECHAS)">@c.PERIODO_FACTURA</button>
                        }

                </div>
            </div>
            @*CONTENEDOR TABLA DRABABLE FACTURAS ANT*@
            <div class="contenedor_tabla_dragable">
                @*Encabezado*@
                <table>
                    <thead>
                        <tr>
                            <th>FACTURA</th>
                            <th>PROYECTO</th>
                            <th>VALOR</th>
                            <th>DESCRIPCION</th>
                        </tr>
                    </thead>
                    <tbody id="personal">
                        @foreach (var a in ViewBag.datasource2)
                            {
                                string COD_FACTURA = a.COD_FACTURA.ToString();
                                string COD_CONTRATO_PROYECTO = a.COD_CONTRATO_PROYECTO.ToString();
                                string VALOR_SIN_IMPUESTOS = a.VALOR_SIN_IMPUESTOS.ToString();
                                string COD_FORMAS_PAGO_FECHA = a.COD_FORMAS_PAGO_FECHAS.ToString();
                                string DESCRIPCION = a.DESCRIPCION.ToString();

                            <tr class="s_panel facturas_ant FACTURA_@COD_FACTURA COD_FECHA_@COD_FORMAS_PAGO_FECHA" tipo="@a.TIPO" factura_ant="@a.COD_FACTURA" factura_actual="@(((long) ViewBag.COD_FACTURA).ToString())" cod_detalle="@a.CAD_DETALLE_FACTURA" descripcion="">
                                <td id="personal">@a.COD_FACTURA</td>
                                <td id="personal">@a.PERIODO_FACTURA.ToString("dd/MM/yyyy")</td>
                                <td id="personal">@a.VALOR_SIN_IMPUESTOS</td>
                                <td id="personal">@a.DESCRIPCION</td>


                            </tr>
                            }
                       

                    </tbody>

                </table>
            </div>


            <div class="row">
                <div class="col-md-12">
                    <table class="col-md-12">
                        <tbody>
                            <div>@(ViewBag.COD_CONTRATO_PROYECTO)</div>
                            <div>@(ViewBag.TOTAL_FACTURA_A)</div>
                            <tr class="fila_total">
                                <th class="titulo_total"><b>Total Factura Anterior:</b></th>
                                <th class="total"><span class="valor_personas">@(ViewBag.TOTAL_FACTURA_A)</span></th>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>


        <!--CONTENEDOR FACTURA ACTUAL-->
        <div class="col-md-5 contenedor_facturas">

            <h4>ITEMS A FACTUTAR</h4>
            <div class="contenedor_tabla_dragable">

                <table>
                    <thead>
                        <tr>
                            <th>FACTURA</th>
                            <th>PROYECTO</th>
                            <th>VALOR</th>
                            <th>DESCRIPCION</th>
                        </tr>
                    </thead>

                    <tbody id="items">
                        @foreach (var b in ViewBag.datasource3)
                            {

                                string COD_FACTURA = b.COD_FACTURA.ToString();
                                string COD_CONTRATO_PROYECTO = b.COD_CONTRATO_PROYECTO.ToString();
                                string VALOR_SIN_IMPUESTOS = b.VALOR_SIN_IMPUESTOS.ToString();
                                string DESCRIPCION = b.DESCRIPCION.ToString();

                            <tr class="FACTURA_@COD_FACTURA">
                                <td>@b.COD_FACTURA</td>
                                <td>@b.PERIODO_FACTURA.ToString("dd/MM/yyyy")</td>
                                <td>@b.VALOR_SIN_IMPUESTOS</td>
                                <td>@b.DESCRIPCION</td>
                            </tr>
                            }          
                    </tbody>
                </table>
            </div>


            <div class="row">
                <div class="col-md-12">
                    <table class="col-md-12">
                        <tbody>
                            <tr class="fila_total">
                                <th class="titulo_total"><b>Total Factura Actual:</b></th>

                                @*<th class="total"><span class="valor_item">@(ViewBag.TOTAL_FACTURA_ITEM_)</span></th>*@
                                @*<th class="total"><span class="valor">@(ViewBag.TOTAL)</span></th>*@
                                <th class="total"><span class="valor_items">@(ViewBag.TOTAL_FACTURA)</span></th>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!--FILA TOTAL-->
    <div class="row">
        <div class="col-md-12">
            <table class="col-md-12">

                <tbody>
                    <tr class="fila_total">
                        <th class="titulo_total"><b>Total</b></th>
                        <th class="total"><span class="valor">@(ViewBag.TOTAL_FACTURA_A == null ? "" : Html.Raw((String)ViewBag.TOTAL_FACTURA_A.ToString()).ToString())</span></th>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!--FILA BOTONES-->
    <div class="row">
        <div class="col-md-6">
            <input type="button" value="Validar" class="btn btn-purple" onclick="validar_factura()" />
            <input type="button" value="Volver" class="btn btn-purple" onclick="redireccionar_index_facturas()" />
        </div>
    </div><!--funciones javascript-->


</div>);
        data.Add().ID("ROLES_PROYECTO").Text("ROLES_PROYECTO").ContentTemplate(
@<div>
    <h2 class="title-etapas">ROLES Y SALARIOS</h2><br>
    <div class="control-section col-md-12">
        @(Html.EJ().Grid<object>
                                                            ("GRID_ROLES1")
                                                            .Datasource(ds => ds.URL("../../../FlujoProyectos/GetOrderData_rol").InsertURL("../../../FlujoProyectos/PerformInsert_rol").UpdateURL("../../../FlujoProyectos/PerformUpdate_rol").RemoveURL("../../../FlujoProyectos/PerformDelete_rol").Adaptor(AdaptorType.UrlAdaptor))
                                                            .AllowPaging()
                                                            .AllowFiltering()
                                                            .Locale("es-CO")
                                                            .AllowResizeToFit(true)
                                                            .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
                                                            .ClientSideEvents(events => events.ActionComplete("grid_roles_complete"))
                                                            .ClientSideEvents(eve => eve.ToolbarClick("clicked"))
                                                            .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.Dialog); })
                                                            .ToolbarSettings(toolbar =>
                                                            {

                                                                toolbar.ShowToolbar()
                                                                .CustomToolbarItems(new List<object>() {
                                                                        new Syncfusion.JavaScript.Models.CustomToolbarItem(){ TemplateID = "#Adjuntar",Tooltip="Adjuntar archivos" }
                                                                }).ToolbarItems(items =>
                                                                {
                                                                    items.AddTool(ToolBarItems.Add);
                                                                    items.AddTool(ToolBarItems.Edit);
                                                                    items.AddTool(ToolBarItems.Delete);
                                                                    items.AddTool(ToolBarItems.Update);
                                                                    items.AddTool(ToolBarItems.Cancel);

                                                                });
                                                            }).Columns(col =>
                                                            {
                                                                col.Field("COD_CONTRATO_PROYECTO").ForeignKeyField("COD_CONTRATO_PROYECTO").Visible(false).ForeignKeyValue("DESCRIPCION").DataSource((IEnumerable<object>)new syncfusion_payc.Models.test_payc_contabilidadEntities().CONTRATO_PROYECTO_DESCRIPCION.ToList()).HeaderText("CONTRATO Y PROYECTO").EditType(EditingType.DropdownEdit).AllowEditing(false).Add();
                                                                col.Field("COD_ROL").ForeignKeyField("COD_ROL").ForeignKeyValue("DESCRIPCION").DataSource((IEnumerable<object>)new syncfusion_payc.Models.test_payc_contabilidadEntities().ROLES.ToList()).HeaderText("ROL").EditType(EditingType.DropdownEdit).ValidationRules(v => v.AddRule("required", true).AddRule("valid_rol_duplicado", true)).Add();
                                                                col.Field("RUTA_DOCUMENTO").HeaderText("RUTA DOCUMENTO ANEXO").AllowEditing(false).Add();
                                                                col.Field("COD_CONTRATO_ROL").HeaderText("CONTRATO_ROL").IsPrimaryKey(true).Visible(false).Format("{0:n0}").EditType(EditingType.NumericEdit).ValidationRules(v => v.AddRule("number", true)).Add();
                                                                col.Field("FECHA_INI").HeaderText("FECHA INICIO ROL").Format("{0:dd/MM/yyyy}").EditType(EditingType.DateTimePicker).ValidationRules(v => v.AddRule("validacion_fecha_rol_contrato", 5).AddRule("validacion_fecha_rol_ejecucion", 5).AddRule("required", true)).Add();

                                                                col.Field("MESES").HeaderText("MESES PERMANENCIA").Format("{0:n0}").EditType(EditingType.NumericEdit).ValidationRules(v => v.AddRule("number", true).AddRule("validacion_meses", "rol").AddRule("required", true)).Add();
                                                                col.Field("DIAS_FRACCION").HeaderText("DIAS FRACCIÓN").Format("{0:n0}").EditType(EditingType.NumericEdit).ValidationRules(v => v.AddRule("number", true).AddRule("validacion_meses", "rol").AddRule("required", true)).Add();
                                                                col.Field("VALOR_MENSUAL_SIN_PRESTACIONES").HeaderText("VALOR_MENSUAL SIN PRESTACIONES").Format("{0:n0}").EditType(EditingType.NumericEdit).NumericEditOptions(new Syncfusion.JavaScript.Models.EditorProperties() { DecimalPlaces = 5, Locale = "es-CO", IncrementStep = 100000, PositivePattern = "$ n " }).ValidationRules(v => v.AddRule("required", true)).Add();
                                                                col.Field("DEDICACION").HeaderText("DEDICACION").Format("{0:p7}").EditType(EditingType.NumericEdit).NumericEditOptions(new Syncfusion.JavaScript.Models.EditorProperties() { DecimalPlaces = 7, Locale = "es-CO", MaxValue = 7, MinValue = -0.01, IncrementStep = 0.01 }).ValidationRules(v => v.AddRule("required", true)).Add();
                                                                col.Field("PRESTACIONES").HeaderText("PRESTACIONES").Format("{0:p5}").EditType(EditingType.NumericEdit).NumericEditOptions(new Syncfusion.JavaScript.Models.EditorProperties() { DecimalPlaces = 5, Locale = "es-CO", MaxValue = 10, MinValue = -0.01, IncrementStep = 0.01 }).ValidationRules(v => v.AddRule("required", true)).Add();
                                                                col.Field("VALOR_MENSUAL_PRESTACIONES").HeaderText("VALOR MENSUAL CON PRESTACIONES").AllowEditing(false).Format("{0:n5}").EditType(EditingType.NumericEdit).ValidationRules(v => v.AddRule("required", true)).NumericEditOptions(new Syncfusion.JavaScript.Models.EditorProperties() { DecimalPlaces = 5, Locale = "es-CO", IncrementStep = 100000 }).Add();
                                                                col.Field("FACTOR_MULTIPLICADOR").HeaderText("FACTOR MULTIPLICADOR").Format("{0:p5}").EditType(EditingType.NumericEdit).NumericEditOptions(new Syncfusion.JavaScript.Models.EditorProperties() { DecimalPlaces = 5, Locale = "es-CO", MaxValue = 10, MinValue = -0.01, IncrementStep = 0.01 }).ValidationRules(v => v.AddRule("required", true)).Add();
                                                                col.Field("VALOR_MENSUAL_PRESTACIONES_MULTIPLICADOR").HeaderText("VALOR MENSUAL CON PRESTACIONES Y FACTOR MULTIPLICADOR").Format("{0:n5}").EditType(EditingType.NumericEdit).AllowEditing(true).NumericEditOptions(new Syncfusion.JavaScript.Models.EditorProperties() { DecimalPlaces = 5, Locale = "es-CO", IncrementStep = 100000 }).ValidationRules(v => v.AddRule("required", true)).Add();
                                                                col.Field("COD_CONCEPTO_PSL").ForeignKeyField("COD_CONCEPTO_PSL").ForeignKeyValue("TEXTO_EN_PSL").DataSource((IEnumerable<object>)new syncfusion_payc.Models.test_payc_contabilidadEntities().CONCEPTOS.ToList()).HeaderText("COD CONCEPTO PSL").EditType(EditingType.DropdownEdit).ValidationRules(v => v.AddRule("number", true).AddRule("required", true)).Add();
                                                                col.Field("OBSERVACIONES").HeaderText("OBSERVACIONES").Add();


                                                            }).ChildGrid(child =>
                                                            {
                                                                child.Datasource(ds => ds.URL("../../CONTRATO_ROL_CARGO/GetOrderData").InsertURL("../../CONTRATO_ROL_CARGO/PerformInsert").UpdateURL("../../CONTRATO_ROL_CARGO/PerformUpdate").RemoveURL("../../CONTRATO_ROL_CARGO/PerformDelete").Adaptor(AdaptorType.UrlAdaptor))
                                                                .AllowPaging()
                                                                .QueryString("COD_CONTRATO_ROL")
                                                                .Locale("es-CO")
                                                                .AllowRowDragAndDrop(false)
                                                                .AllowScrolling(false)
                                                                .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.Normal); })
                                                                .ClientSideEvents(e => e.ActionBegin("inicio_grid"))
                                                                .ToolbarSettings(toolbar =>
                                                                {
                                                                    toolbar.ShowToolbar().ToolbarItems(items =>
                                                                    {
                                                                        items.AddTool(ToolBarItems.Add);
                                                                        items.AddTool(ToolBarItems.Edit);
                                                                        items.AddTool(ToolBarItems.Delete);
                                                                        items.AddTool(ToolBarItems.Update);
                                                                        items.AddTool(ToolBarItems.Cancel);
                                                                    });
                                                                }).Columns(col =>
                                                                {
                                                                    col.Field("COD_CARGO").ForeignKeyField("COD_CARGO").ForeignKeyValue("DESCRIPCION_CARGO").DataSource((IEnumerable<object>)new syncfusion_payc.Models.test_payc_contabilidadEntities().CARGOS.ToList()).HeaderText("CARGO").ValidationRules(v => v.AddRule("required", true)).EditType(EditingType.DropdownEdit).Add();
                                                                    col.Field("COD_CONTRATO_ROL").ForeignKeyField("COD_CONTRATO_ROL").Visible(false).ForeignKeyValue("COD_CONTRATO_ROL").DataSource((IEnumerable<object>)new syncfusion_payc.Models.test_payc_contabilidadEntities().CONTRATOS_ROL.ToList()).HeaderText("COD_CONTRATO_ROL").EditType(EditingType.DropdownEdit).Add();
                                                                    col.Field("COD_CONTRATO_ROL_CARGO").HeaderText("COD_CONTRATO_ROL_CARGO").IsPrimaryKey(true).Visible(false).Format("{0:n0}").EditType(EditingType.NumericEdit).ValidationRules(v => v.AddRule("number", true)).Add();
                                                                });

                                                            }).ClientSideEvents(e => e.ActionBegin("inicio_rol").QueryCellInfo("calcular").Create("create")))
    </div>
    <div>@(ViewBag.COD_CONTRATO_PROYECTO)</div>

</div>);
        data.Add().ID("REGENERAR_FLUJO").Text("REGENERAR FLUJO").ContentTemplate(
@<div>
    <div data-Step="4">
        <h2 class="title-etapas">MENSUALIDADES PACTADAS O FLUJO INGRESOS PERSONAL</h2><br>
        <!--Flujos e incrementos salariales-->
        <div class="control-section col-md-12">

            <!--Grid incrementos-->
            <div class="col-md-12 oculta incrementos" style="margin-top:15px">
                @(Html.EJ().Grid<syncfusion_payc.Models.INCREMENTO_SALARIAL>
                                                        ("Grid_INCREMENTOS")
                                                        .Datasource(ds => ds.URL("../../../FlujoProyectos/GetOrderData_incrementos").InsertURL("../../../FlujoProyectos/PerformInsert_incrementos").UpdateURL("../../../FlujoProyectos/PerformUpdate_incrementos").RemoveURL("../../../FlujoProyectos/PerformDelete_incrementos").Adaptor(AdaptorType.UrlAdaptor))
                                                        .AllowPaging()
                                                        .Locale("es-CO")
                                                        .AllowScrolling()
                                                        .AllowFiltering(true)
                                                        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
                                                        .ClientSideEvents(e => e.ActionBegin("inicio_grid_incrementos"))
                                                        .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.Dialog); })
                                                        .ToolbarSettings(toolbar =>
                                                        {
                                                                        toolbar.ShowToolbar().ToolbarItems(items =>
                                                                    {

                                                                                        items.AddTool(ToolBarItems.Edit);
                                                                                        items.AddTool(ToolBarItems.Delete);
                                                                                        items.AddTool(ToolBarItems.Update);
                                                                                        items.AddTool(ToolBarItems.Cancel);

                                                                                    });

                                                                    }).Columns(col =>
                                                                    {
                                                                                        col.Field("COD_CONTRATO_PROYECTO").Visible(false).AllowEditing(false).Add();
                                                                                        col.Field("FECHA_INCREMENTO").HeaderText("FECHA").Format("{0:dd/MM/yyyy}").EditType(EditingType.DateTimePicker).Add();
                                                                                        col.Field("COD_INCREMENTO_ORDEN").HeaderText("COD_INCREMENTO_ORDEN").IsPrimaryKey(true).Visible(false).Format("{0:n0}").EditType(EditingType.NumericEdit).ValidationRules(v => v.AddRule("number", true)).Add();
                                                                                        col.Field("FACTOR_INCREMENTO").HeaderText("FACTOR INCREMENTO").Format("{0:n5}").EditType(EditingType.NumericEdit).NumericEditOptions(new Syncfusion.JavaScript.Models.EditorProperties() { DecimalPlaces = 5, Locale = "es-CO", MaxValue = 10, MinValue = -0.01, IncrementStep = 0.001 }).Add();
                                                                                    }))
                <button type="button" class="btn btn-purple boton_incrementos regenerar" onclick="abrir_incrementos()" style="margin-top:15px;margin-bottom:15px;">MOSTRAR INCREMENTOS SALARIALES</button>
            </div>

            <!--Pivot flujos de ingresos-->
            <div class="col-md-12 sin-overflow">
                <div id="PivotGrid1"></div>
                @*@(Html.EJ().Pivot().PivotGrid("PivotGrid1")
                    .Locale("es-CO")
                    .Url(Url.Content("~/servicios/FlujoIngresosRoles.svc"))
                    .EnableColumnResizing(false)
                    .EnableToolTip(false)
                    .EnableCellContext(false)
                    .EnableCellSelection(false)
                    .EnableJSONRendering(false)
                    .IsResponsive(false)
                    .EnableVirtualScrolling(false)
                    .EnableDefaultValue(false)
                    .EnableCellClick(false)
                    .EnableCellDoubleClick(false)
                    .EnableCollapseByDefault(false)
                    .EnableConditionalFormatting(false)
                    .EnableDeferUpdate(false)
                    .EnableDrillThrough(false)
                    .EnableXHRCredentials(false)
                    .EnableRTL(false)

                    .EnableMemberEditorPaging(false)
                    .EnableCellEditing(true).ClientSideEvents(events => events
                    .CellEdit("editar_flujo_rol").Load("onLoad")
                    .BeforeServiceInvoke("beforeserviceinvoke")

                    .AfterServiceInvoke("flujo_rol_despues")
                    ))*@
            </div>
        </div>

        <!--Botones-->
        <div class="col-md-12" style="margin-top:15px;">
            @*Botón de regeneración de flujos*@
            <button type="button" class="btn btn-purple regerenar" onclick="regenerar_flujo_rol()">REGENERAR FLUJO</button>
            @*Botón de apertura de incrementos*@
            <button type="button" class="btn btn-purple boton_incrementos regenerar" onclick="abrir_incrementos()">MOSTRAR INCREMENTOS SALARIALES</button>


        </div>

    </div>


</div>);
        data.Add().ID("ASIGNACIÓN_PERSONAL").Text("ASIGNACIÓN PERSONAL").ContentTemplate(
@<div>
    <h4>PENDIENTES DE ASIGNACIÓN</h4>
    <div class="control-section">
        @if (User.Identity.IsAuthenticated)
            {
            @(Html.EJ().Grid<syncfusion_payc.Models.PENDIENTES>("Grid5")
                                                                            .Datasource(ds => ds.URL("../../../CONTRATO_COLABORADOR/GetOrderData_pendientes").Adaptor(AdaptorType.UrlAdaptor))
                                                                            .AllowPaging()
                                                                            .AllowFiltering()
                                                                            .Locale("es-CO")
                                                                            .AllowResizeToFit(true)
                                                                            .AllowRowDragAndDrop(false)
                                                                            .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
                                                                            .ToolbarSettings(toolbar =>
                                                                            {
                                                                                toolbar.ShowToolbar().ToolbarItems(items =>
                                                                                {

                                                                                    items.AddTool(ToolBarItems.Edit);
                                                                                    items.AddTool(ToolBarItems.Delete);
                                                                                    items.AddTool(ToolBarItems.Update);
                                                                                    items.AddTool(ToolBarItems.Cancel);
                                                                                    items.AddTool(ToolBarItems.Search);
                                                                                });
                                                                            }).Columns(col =>
                                                                            {
                                                                                col.Field("COD_CONTRATO_PROYECTO").HeaderText("COD CONTRATO PROYECTO").IsPrimaryKey(true).Visible(false).Format("{0:n0}").EditType(EditingType.NumericEdit).ValidationRules(v => v.AddRule("number", true)).Add();
                                                                                col.Field("CENTRO_COSTOS").HeaderText("CENTRO COSTOS").EditType(EditingType.DropdownEdit).Add();
                                                                                col.Field("DESCRIPCION").HeaderText("DESCRIPCION").ForeignKeyField("DESCRIPCION").ForeignKeyValue("DESCRIPCION").DataSource((IEnumerable<object>)new syncfusion_payc.Models.test_payc_contabilidadEntities().PROYECTOS.ToList()).EditType(EditingType.DropdownEdit).Add();
                                                                                col.Field("FECHA_INICIO_EJECUCION").HeaderText("FECHA INICIO EJECUCION").Format("{0:dd/MM/yyyy}").EditType(EditingType.DateTimePicker).Add();
                                                                                col.Field("FECHA_FIN_EJECUCION").HeaderText("FECHA FIN EJECUCION").Format("{0:dd/MM/yyyy}").EditType(EditingType.DateTimePicker).Add();
                                                                                col.Field("TIPO_SERVICIO").HeaderText("TIPO SERVICIO").ForeignKeyField("TIPO_SERVICIO").ForeignKeyValue("TIPO_SERVICIO").DataSource((IEnumerable<object>)new syncfusion_payc.Models.test_payc_contabilidadEntities().PROYECTOS.ToList()).EditType(EditingType.DropdownEdit).Add();
                                                                                col.Field("TIPO_OBRA").HeaderText("TIPO OBRA").ForeignKeyField("TIPO_OBRA").ForeignKeyValue("TIPO_OBRA").DataSource((IEnumerable<object>)new syncfusion_payc.Models.test_payc_contabilidadEntities().PROYECTOS.ToList()).EditType(EditingType.DropdownEdit).Add();
                                                                            }).ChildGrid(child =>
                                                                            {
                                                                                child.Datasource(ds => ds.URL("../../../CONTRATO_COLABORADOR/GetOrderData").InsertURL("../../../CONTRATO_COLABORADOR/PerformInsert").UpdateURL("PerformUpdate").RemoveURL("../../../CONTRATO_COLABORADOR/PerformDelete").Adaptor(AdaptorType.UrlAdaptor))
                                                                                .AllowPaging()
                                                                                .QueryString("COD_CONTRATO_PROYECTO")
                                                                                .Locale("es-CO")
                                                                                .AllowRowDragAndDrop(false)
                                                                                .AllowResizeToFit(true)
                                                                                .AllowScrolling(true)
                                                                                .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
                                                                                .ClientSideEvents(eve => eve.ToolbarClick("clicked"))
                                                                                .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.Dialog); })
                                                                                .ClientSideEvents(e => e.ActionBegin("inicio_grid"))
                                                                                .ToolbarSettings(toolbar =>
                                                                                {
                                                                                    toolbar.ShowToolbar().CustomToolbarItems(new List<object>() {
                                                            new Syncfusion.JavaScript.Models.CustomToolbarItem(){ TemplateID = "#Pendientes",Tooltip="Generar pendientes de asignación" }
                                                            ,new Syncfusion.JavaScript.Models.CustomToolbarItem(){ TemplateID = "#Validar",Tooltip="Validar asignaciones" }
                                                                                    }).ToolbarItems(items =>
                                                                                    {
                                                                                        items.AddTool(ToolBarItems.Add);
                                                                                        items.AddTool(ToolBarItems.Edit);
                                                                                        items.AddTool(ToolBarItems.Delete);
                                                                                        items.AddTool(ToolBarItems.Update);
                                                                                        items.AddTool(ToolBarItems.Search);
                                                                                    });
                                                                                }).Columns(col =>
                                                                                {
                                                                                    col.Field("COD_CONTRATO_COLABORADOR").HeaderText("CONTRATO_COLABORADOR").IsPrimaryKey(true).Visible(false).Format("{0:n0}").EditType(EditingType.NumericEdit).Add();
                                                                                    col.Field("COD_ROL").ForeignKeyField("COD_ROL").ForeignKeyValue("DESCRIPCION").DataSource((IEnumerable<object>)new syncfusion_payc.Models.test_payc_contabilidadEntities().ROLES.ToList()).HeaderText("ROL").ValidationRules(v => v.AddRule("required", true)).EditType(EditingType.DropdownEdit).Add();
                                                                                    col.Field("COD_COLABORADOR").ForeignKeyField("COD_COLABORADOR").ForeignKeyValue("DESCRIPCION").DataSource((IEnumerable<object>)new syncfusion_payc.Models.test_payc_contabilidadEntities().COLABORADORES.ToList()).HeaderText("COLABORADOR").ValidationRules(v => v.AddRule("test", true)).EditType(EditingType.DropdownEdit).Add();
                                                                                    col.Field("DESCRIPCION_CARGO").HeaderText("CARGO").AllowEditing(false).EditType(EditingType.StringEdit).Add();
                                                                                    col.Field("COD_CONTRATO_PROYECTO").HeaderText("CONTRATO_COLABORADOR").Visible(false).Format("{0:n0}").EditType(EditingType.NumericEdit).Add();
                                                                                    col.Field("FECHA_INI_COLABORADOR").HeaderText("FECHA INICIO EN PROYECTO").ValidationRules(v => v.AddRule("required", true)).Format("{0:dd/MM/yyyy}").EditType(EditingType.DateTimePicker).Add();
                                                                                    col.Field("FECHA_FIN").HeaderText("FECHA FIN").Format("{0:dd/MM/yyyy}").ValidationRules(v => v.AddRule("required", true).AddRule("comparacion_fechas", true)).EditType(EditingType.DateTimePicker).Add();
                                                                                })
                                                                                    .DetailsTemplate("#tabGridContents");
                                                                            })
            )
            }

    </div>


</div>);
        data.Add().ID("NOVEDADES_NÓMINA").Text("NOVEDADES DE NÓMINA").ContentTemplate(
@<div>
    <h4>REGISTRO DE NOVEDADES </h4>
    <div class="control-section">

        @(Html.EJ().Grid<syncfusion_payc.Models.ORDENES_SERVICIO_INDEX>("Grid6")
                                                                                                .Datasource(ds => ds.URL("../../../FlujoProyectos/GetOrderData_contrato_proyecto").InsertURL("../../../FlujoProyectos/PerformInsert_contrato_proyecto").UpdateURL("../../../FlujoProyectos/PerformUpdate_contrato_proyecto").RemoveURL("../../../FlujoProyectos/PerformDelete").Adaptor(AdaptorType.UrlAdaptor))
                                                                                                .AllowPaging()
                                                                                                .AllowFiltering()
                                                                                                .Locale("es-CO")
                                                                                                .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
                                                                                                .ClientSideEvents(e => e.ActionBegin("inicio_grid"))
                                                                                                .ToolbarSettings(toolbar =>
                                                                                                {
                                                                                                    toolbar.ShowToolbar().ToolbarItems(items =>
                                                                                                    {
                                                                                                        items.AddTool(ToolBarItems.Add);
                                                                                                        items.AddTool(ToolBarItems.Edit);
                                                                                                        items.AddTool(ToolBarItems.Delete);
                                                                                                        items.AddTool(ToolBarItems.Update);
                                                                                                        items.AddTool(ToolBarItems.Cancel);
                                                                                                        items.AddTool(ToolBarItems.Search);

                                                                                                    });

                                                                                                }).Columns(col =>
                                                                                                {
                                                                                                    col.Field("COD_CONTRATO_PROYECTO").HeaderText("CONTRATO_PROYECTO").IsPrimaryKey(true).Format("{0:n0}").EditType(EditingType.NumericEdit).Add();
                                                                                                    col.Field("CENTRO_COSTOS").HeaderText("CENTRO COSTOS").Add();
                                                                                                    col.Field("DESCRIPCION").HeaderText("DESCRIPCION").AllowEditing(false).AllowFiltering(true).Add();


                                                                                                })
                                                                                                .ChildGrid(child => child
                                                                                                    .Datasource(ds => ds.URL("../../REGISTRO_NOVEDADES/GetOrderData").InsertURL("../../REGISTRO_NOVEDADES/PerformInsert").UpdateURL("../../REGISTRO_NOVEDADES/PerformUpdate").RemoveURL("../../REGISTRO_NOVEDADES/PerformDelete").Adaptor(AdaptorType.UrlAdaptor))
                                                                                                    .AllowPaging()
                                                                                                    .AllowFiltering()
                                                                                                    .AllowKeyboardNavigation(false)
                                                                                                    .Locale("es-CO")
                                                                                                    .QueryString("COD_CONTRATO_PROYECTO")
                                                                                                    .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
                                                                                                    .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.Dialog); })
                                                                                                    .ClientSideEvents(e => e.ActionBegin("inicio_grid"))
                                                                                                    .ToolbarSettings(toolbar =>
                                                                                                    {
                                                                                                        toolbar.ShowToolbar().ToolbarItems(items =>
                                                                                                        {
                                                                                                            items.AddTool(ToolBarItems.Add);
                                                                                                            items.AddTool(ToolBarItems.Edit);
                                                                                                            items.AddTool(ToolBarItems.Delete);
                                                                                                            items.AddTool(ToolBarItems.Update);
                                                                                                            items.AddTool(ToolBarItems.Cancel);

                                                                                                        });

                                                                                                    }).Columns(col =>
                                                                                                    {
                                                                                                        col.Field("COD_COLABORADOR").ForeignKeyField("COD_COLABORADOR").Type("string").ForeignKeyValue("DESCRIPCION").DataSource((IEnumerable<object>)new syncfusion_payc.Models.test_payc_contabilidadEntities().COLABORADORES.ToList()).ValidationRules(v => v.AddRule("required", true)).HeaderText("COLABORADOR").EditType(EditingType.DropdownEdit).Add();
                                                                                                        col.Field("COD_CONTRATO_PROYECTO").Visible(true).AllowEditing(false).ForeignKeyField("COD_CONTRATO_PROYECTO").ForeignKeyValue("DESCRIPCION").DataSource((IEnumerable<object>)new syncfusion_payc.Models.test_payc_contabilidadEntities().CONTRATO_PROYECTO_DESCRIPCION.ToList()).HeaderText("CONTRATO_PROYECTO").EditType(EditingType.DropdownEdit).Add();
                                                                                                        col.Field("COD_TIPO_NOVEDAD").ForeignKeyField("COD_TIPO_NOVEDAD").Type("string").ForeignKeyValue("DESCRIPCION").DataSource((IEnumerable<object>)new syncfusion_payc.Models.test_payc_contabilidadEntities().TIPOS_NOVEDAD.ToList()).HeaderText("TIPO_NOVEDAD").ValidationRules(v => v.AddRule("required", true)).EditType(EditingType.DropdownEdit).Add();
                                                                                                        col.Field("COD_REGISTRO_NOVEDADES").HeaderText("REGISTRO_NOVEDADES").IsPrimaryKey(true).Visible(false).Format("{0:n0}").EditType(EditingType.NumericEdit).ValidationRules(v => v.AddRule("number", true)).Add();
                                                                                                        col.Field("FECHA_INICIO_NOVEDAD").HeaderText("FECHA_INICIO_NOVEDAD").Format("{0:dd/MM/yyyy HH:mm}").ValidationRules(v => v.AddRule("required", true)).EditType(EditingType.DateTimePicker).Add();
                                                                                                        col.Field("FECHA_FIN_NOVEDAD").HeaderText("FECHA_FIN_NOVEDAD").Format("{0:dd/MM/yyyy HH:mm}").ValidationRules(v => v.AddRule("required", true).AddRule("comparacion_fechas", true)).EditType(EditingType.DateTimePicker).Add();
                                                                                                        col.Field("TRABAJA_SABADOS").ForeignKeyField("BIT").ForeignKeyValue("TEXTO").DataSource((IEnumerable<object>)new syncfusion_payc.Models.test_payc_contabilidadEntities().TRUEFALSE.ToList()).ValidationRules(v => v.AddRule("required", true)).EditType(EditingType.DropdownEdit).Add();
                                                                                                    })))

    </div>


</div>);
    }).Render();
        }
    </div>
    <script type="text/javascript">
    //val = $("#e-summaryrow.e-scroller").val();
    //console.log(val)
    //text = $("#e-summaryrow.e-scroller").text();
    //console.log(text)

    ////value = $("#e-summaryrow e-scroller").value();
    ////console.log(value)

    //hmtlaa= $("#e-summaryrow.e-scroller").html();
    //console.log(hmtlaa)

    //textOfTdhtml = $("#e-summaryrow.e-scroller").find(".class").text();
    //console.log(textOfTdhtml)

    //textOfTdhtext = $("#e-summaryrow.e-scroller").find(".class").text();
    //console.log(textOfTdhtext)

    //console.log("va a empezar el jquery")
    //$("tbody").find("tr").each(function () { //get all rows in table
    //    var ratingTdText = $(this).find('td.e-summaryrow.e-scroller').text();
    //    console.log(ratingTdText)
    //    var aa = $(this).find('td.e-summaryrow.e-scroller');
    //    console.log(aa)
    //});
    //console.log("fin del jquery")



    //$("tbody").find("tr").each(function () { //get all rows in table
    //    var ratingTdText = $(this).find('td.actionclass').text();
    //    if ((ratingTdText == "saved block")) {
    //        this.innerHTML = 'changed';
    //    }
    //});



    //$("tbody").find("tr").each(function () { //get all rows in table
    //    var ratingTd = $(this).find('td.actionclass');//Refers to TD element
    //    if (ratingTd.text() == "saved block") {
    //        ratingTd.text('changed');
    //    }
    //});


    //$(".e-summaryrow e-scroller").mouseenter(function () {
    //    var a = $(this).text();
    //});

    //$(".item-model-number .value").each(function () {
    //    var value = $(this).text();
    //    console.log(value);
    //})


    function redireccionar_index_facturas() {
        window.location = "../Index";
    }
    //Traducción
    $(document).ready(function () {
        ej.Grid.Locale["es-CO"] = {
            EmptyRecord: "No hay registros que mostrar",
            GroupDropArea: "Arrastre un encabezado de columna aquí para agrupar su columna",
            DeleteOperationAlert: "No hay registros seleccionados para la operación de eliminación",
            EditOperationAlert: "No hay registros seleccionados para la operación de edición",
            SaveButton: "Guardar",
            OKButton: "DE ACUERDO",
            CancelButton: "Cancelar",
            EditFormTitle: "Detalles de ",
            AddFormTitle: "Añadir nuevo registro",
            GroupCaptionFormat: "{{:headerText}}: {{:key}} - {{:count}} {{if count == 1 }} ítem {{else}} artículos {{/if}} ",
        };
        ej.Pager.Locale["es-CO"] = {
            pagerInfo: "{0} de {1} páginas ({2} artículos)",
            firstPageTooltip: "Ir a la primera página",
            lastPageTooltip: "Ir a la última página",
            nextPageTooltip: "Ir a la página siguiente",
            previousPageTooltip: "Ir a la página anterior",
            nextPagerTooltip: "Ir al siguiente Pager",
            previousPagerTooltip: "Ir a Pager anterior"
        };
        ej.ExcelFilter.Locale["es-CO"] = {
            SortNoSmaller: "Ordenar de menor a mayor",
            SortNoLarger: "Ordenar de mayor a menor",
            SortTextAscending: "Ordenar de A a Z",
            SortTextDescending: "Ordenar de Z a A",
            SortDateOldest: "Ordenar por Más antiguos",
            SortDateNewest: "Ordenar por Más reciente",
            SortByColor: "Ordenar por color",
            SortByCellColor: "Ordenar por color de la célula",
            SortByFontColor: "Ordenar por Color de fuente",
            FilterByColor: "Filtrar por color",
            CustomSort: "Orden personalizado",
            FilterByCellColor: "Filtrar por color de la célula",
            FilterByFontColor: "Filtrar por color de fuente",
            ClearFilter: "Borrar filtro",
            NumberFilter: "Número Filtros",
            GuidFilter: "Gud Filtros",
            TextFilter: "Filtros de texto",
            DateFilter: "Filtros de fecha",
            DateTimeFilter: "Fecha filtros de tiempo",
            SelectAll: "Seleccionar todo",
            Blanks: "Los espacios en blanco",
            Search: "Buscar",
            Showrowswhere: "Mostrar filas",
            NumericTextboxWaterMark: "introducir el valor",
            StringMenuOptions: [{ text: "Igual", value: "equal" }, { text: "No es equal", value: "notequal" }, { text: "Comienza con", value: "startswith" }, { text: "Termina con", value: "endswith" }, { text: "contiene", value: "contains" }, { text: "Filtro personalizado", value: "customfilter" },],
            NumberMenuOptions: [{ text: "Igual", value: "equal" }, { text: "No es equal", value: "notequal" }, { text: "Menos que", value: "lessthan" }, { text: "Menor o equal", value: "lessthanorequal" }, { text: "Mas grande que", value: "greaterthan" }, { text: "Mayor que o equal", value: "greaterthanorequal" }, { text: "Entre", value: "between" }, { text: "Filtro personalizado", value: "customfilter" },],
            GuidMenuOptions: [{ text: "Igual", value: "equal" }, { text: "No es equal", value: "notequal" }, { text: "Filtro personalizado", value: "customfilter" },],
            DateMenuOptions: [{ text: "Igual", value: "equal" }, { text: "No es equal", value: "notequal" }, { text: "Menos que", value: "lessthan" }, { text: "Menor o equal", value: "lessthanorequal" }, { text: "Mas grande que", value: "greaterthan" }, { text: "Mayor que o equal", value: "greaterthanorequal" }, { text: "Entre", value: "between" }, { text: "Filtro personalizado", value: "customfilter" },],
            DatetimeMenuOptions: [{ text: "Igual", value: "equal" }, { text: "No es equal", value: "notequal" }, { text: "Menos que", value:"lessthan" }, { text: "Menor o equal", value: "lessthanorequal" }, { text: "Mas grande que", value: "greaterthan" }, { text: "Mayor que o equal", value: "greaterthanorequal" }, { text: "Entre", value: "between" }, { text: "Filtro personalizado", value: "customfilter" },],
            Top10MenuOptions: [{ text: "Parte superior", value: "top" }, { text: "Fondo", value: "bottom" },],
            title: "Filtro personalizado",
            PredicateAnd: "Y",
            PredicateOr: "O",
            Ok: "Aceptar",
            MatchCase: "Coincidencia",
            Cancel: "Cancelar",
            NoResult: "No se encontraron coincidencias",
            CheckBoxStatusMsg: "No todos los elementos que muestran",
            DatePickerWaterMark: "Seleccione fecha",
            DateTimePickerWaterMark: "Seleccionar fecha y hora",
            True: "cierto",
            False: "falso"
        };
    });


    //Función que se ejecuta en el evento load
    function inicio_grid_items(args) {

        var cod_contrato_proyecto = "@(ViewBag.COD_CONTRATO_PROYECTO == null ? "" : Html.Raw((String)ViewBag.COD_CONTRATO_PROYECTO.ToString()).ToString())";
        if (cod_contrato_proyecto != "") {
            this.model.filterSettings.filteredColumns.push({ field: "COD_CONTRATO_PROYECTO", operator: "equal", value: cod_contrato_proyecto });
        }
        var COD_FACTURA = "@(ViewBag.COD_FACTURA == null ? "" : Html.Raw((String)ViewBag.COD_FACTURA.ToString()).ToString())";
        if (COD_FACTURA != "") {
            this.model.filterSettings.filteredColumns.push({ field: "COD_FACTURA", operator: "equal", value: COD_FACTURA });
        }
        var COD_FORMAS_PAGO_FECHAS = "@(ViewBag.COD_FORMAS_PAGO_FECHAS == null ? "" : Html.Raw((String)ViewBag.COD_FORMAS_PAGO_FECHAS.ToString()).ToString())";
        if (COD_FORMAS_PAGO_FECHAS != "") {
            this.model.filterSettings.filteredColumns.push({ field: "COD_FORMAS_PAGO_FECHAS", operator: "equal", value: COD_FORMAS_PAGO_FECHAS });
        }
        var COD_ESTADO_DETALLE = "1";
        if (COD_ESTADO_DETALLE != "") {
            this.model.filterSettings.filteredColumns.push({ field: "COD_ESTADO_DETALLE", operator: "equal", value: COD_ESTADO_DETALLE});
        }

        refrescar_total();
    }



    //Función que se ejecuta en el evento load
    function inicio_grid_roles(args) {
        //console.log("esta en inicio_grid_roles ")
        var cod_contrato_proyecto = "@(ViewBag.COD_CONTRATO_PROYECTO == null ? "" : Html.Raw((String)ViewBag.COD_CONTRATO_PROYECTO.ToString()).ToString())";
        if (cod_contrato_proyecto != "") {
            this.model.filterSettings.filteredColumns.push({ field: "COD_CONTRATO_PROYECTO", operator: "equal", value: cod_contrato_proyecto });
        }

        var COD_FACTURA = "@(ViewBag.COD_FACTURA == null ? "" : Html.Raw((String)ViewBag.COD_FACTURA.ToString()).ToString())";
        if (COD_FACTURA != "") {
            this.model.filterSettings.filteredColumns.push({ field: "COD_FACTURA", operator: "equal", value: COD_FACTURA });
        }
        //var COD_FORMAS_PAGO_FECHAS = "@(ViewBag.COD_FORMAS_PAGO_FECHAS == null ? "" : Html.Raw((String)ViewBag.COD_FORMAS_PAGO_FECHAS.ToString()).ToString())";
        //if (COD_FORMAS_PAGO_FECHAS != "") {
        //    this.model.filterSettings.filteredColumns.push({ field: "COD_FORMAS_PAGO_FECHAS", operator: "equal", value: COD_FORMAS_PAGO_FECHAS });
        //}
        //var COD_ESTADO_DETALLE = "1";
        //if (COD_ESTADO_DETALLE != "") {
        //    this.model.filterSettings.filteredColumns.push({ field: "COD_ESTADO_DETALLE", operator: "equal", value: COD_ESTADO_DETALLE});
        //}
        refrescar_total();
    }

    //Función que se ejecuta en el evento load
    function inicio_grid_roles1(args) {


        var COD_FACTURA = "@(ViewBag.COD_FACTURA == null ? "" : Html.Raw((String)ViewBag.COD_FACTURA.ToString()).ToString())";
        if (COD_FACTURA != "") {
            this.model.filterSettings.filteredColumns.push({ field: "COD_FACTURA", operator: "equal", value: COD_FACTURA });
        }
        var COD_FORMAS_PAGO_FECHAS = "@(ViewBag.COD_FORMAS_PAGO_FECHAS == null ? "" : Html.Raw((String)ViewBag.COD_FORMAS_PAGO_FECHAS.ToString()).ToString())";
        if (COD_FORMAS_PAGO_FECHAS != "") {
            this.model.filterSettings.filteredColumns.push({ field: "COD_FORMAS_PAGO_FECHAS", operator: "equal", value: COD_FORMAS_PAGO_FECHAS });
        }
    }

    //Función click en los elementos nuevos
    function clicked(sender) {
        var cod_contrato_proyecto = "@(ViewBag.COD_CONTRATO_PROYECTO == null ? "" : Html.Raw((String)ViewBag.COD_CONTRATO_PROYECTO.ToString()).ToString())";
        var cod_factura =@(ViewBag.COD_FACTURA == null ? "" : Html.Raw((String)ViewBag.COD_FACTURA.ToString()).ToString());
        var estado_factura = "@(ViewBag.ESTADO_FACTURA == null ? "" : Html.Raw((String)ViewBag.ESTADO_FACTURA.ToString()).ToString())";
        //$(".contenedor_loader1").show();
        //Exportación a excel
        if (sender.itemName == "Excel Export") {
            var grid = $('#Grid_Adjunto').ejGrid('instance');
            if (estado_factura == "1" || estado_factura == "2") {
                alert("La factura no ha sido enviada a PSL, y por lo tanto, no esta habilitada para la generación del archivo adjunto.");
                $(".contenedor_loader1").hide();
            }
            else {
                var data = JSON.stringify({ gridModel: JSON.stringify(grid.model), COD_FACTURA: parseInt(cod_factura), COD_CONTRATO_PROYECTO: cod_contrato_proyecto });
                var url = "../../VISTA_DETALLE_ADJUNTOS_PERS/ExcelExport";
                $.ajax({
                    type: "POST",
                    url: url,
                    data: data,
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    dataFilter: function (data) { return data; },
                    success: function (data) {
                        var url = "../../VISTA_DETALLE_ADJUNTOS_PERS/adjuntosfactura/Adjunto_" + data.result + ".xlsx";
                        var win = window.open(url, '_blank');
                        win.focus();
                        $(".contenedor_loader1").hide();
                    },
                    error: function (data) {
                        alert("Ha ocurrido un error inesperado. Por favor vuelva a intentarlo. Si el problema persiste, contacte al administrador del sistema.")
                        $(".contenedor_loader1").hide();
                    }

                });
            }

        }
    }

    function validar_factura() {
        var cod_contrato_proyecto = "@(ViewBag.COD_CONTRATO_PROYECTO == null ? "" : Html.Raw((String)ViewBag.COD_CONTRATO_PROYECTO.ToString()).ToString())";
        var cod_factura = "@(ViewBag.COD_FACTURA == null ? "" : Html.Raw((String)ViewBag.COD_FACTURA.ToString()).ToString())";
        var cod_formas_pago_fechas = "@(ViewBag.COD_FORMAS_PAGO_FECHAS == null ? "" : Html.Raw((String)ViewBag.COD_FORMAS_PAGO_FECHAS.ToString()).ToString())";
        var data = JSON.stringify({ COD_CONTRATO_PROYECTO: parseInt(cod_contrato_proyecto), COD_FACTURA: parseInt(cod_factura), COD_FORMAS_PAGO_FECHAS: parseInt(cod_formas_pago_fechas) });
        var estado_factura = "@(ViewBag.ESTADO_FACTURA == null ? "" : Html.Raw((String)ViewBag.ESTADO_FACTURA.ToString()).ToString())";
        //alert(estado_factura);
        if (estado_factura == "1" || estado_factura == "2") {
            var url = "../validar_factura";
            $.ajax({
                type: "POST",
                url: url,
                data: data,
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                dataFilter: function (data) { return data; },
                success: function (data) {
                    if (data.responseText == "SI") {
                        alert("Existen errores en los valores a facturar, por favor verifique que todos los elementos estan asociados a un concepto de PSL");
                    }
                    else {
                        alert("Factura verificada con éxito");
                        window.location = "../Index";
                    }
                }
            });
        }
        else {
            alert("Error al verificar. La factura no se encuentra pendiente de envío a PSL o de revisión.")
        }
    }
    //Función que refresca la grid hijo de facturas después
    function finalizar_accion(args) {
        //console.log(args.requestType )
        //console.log("esta en finalizar accion")
        if (args.requestType == "save" || args.requestType == "delete") {
            //console.log("esta en save de finalizar accion")
            refrescar_total();
        }
    }
    //Funcion para refrescar total
    function refrescar_total() {
        //console.log("esta en reefrescar total")
        var instancia = $("#GRID_ROLES").ejGrid("instance");
        setTimeout(function () { instancia.refreshContent(); }, 1000)
        try {
            var instanciaI = $("#GRID_ITEMS").ejGrid("instance");
            //var instanciaR = $("#GRID_ROLES").ejGrid("instance");
            setTimeout(function () { instanciaI.refreshContent(); }, 1000);
            //setTimeout(function () { instanciaR.refreshContent(); }, 1000);
        }
        catch{

        }
        var cod_factura =@(ViewBag.COD_FACTURA == null ? "" : Html.Raw((String)ViewBag.COD_FACTURA.ToString()).ToString());
        var data = JSON.stringify({ COD_FACTURA: parseInt(cod_factura) });
        var url = "../refrescar_total";
        //console.log("Va a iniciar post de reefrescar total")
        $.ajax({
            type: "POST",
            url: url,
            data: data,
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            dataFilter: function (data) { return data; },
            success: function (data) {
                //console.log("esta en success de post")
                //console.log(data)
                $('.valor').text(data.responseText);
                $('.valor_personas').text(data.total_factura_pers);
                $('.valor_items').text(data.total_factura_item);
            }
        });
    }
    //Función que permite verificar las facturas
    function ver_adjunto_factura() {
        //alert("verificar");
        //Validar que el estado sea correcto para verificar
        var cod_fact = "@(ViewBag.COD_FACTURA == null ? "" : Html.Raw((String)ViewBag.COD_FACTURA.ToString()).ToString())";
        window.location = "../Adjunto/" + cod_fact;
        }
    //funcion que se ejecuta al inicio de las acciones de la grid roles
    function inicio_accion_roles(args) {

        var cod_estado_factura=@(ViewBag.COD_ESTADO_FACTURA);
        //console.log("esta en accion inicio_accion_roles")
        //console.log("cod_estado_factura"+cod_estado_factura);
        var cod_contrato_proyecto = "@(ViewBag.COD_CONTRATO_PROYECTO == null ? "" : Html.Raw((String)ViewBag.COD_CONTRATO_PROYECTO.ToString()).ToString())";
        var cod_factura = "@(ViewBag.COD_FACTURA == null ? "" : Html.Raw((String)ViewBag.COD_FACTURA.ToString()).ToString())";
        var cod_formas_pago_fechas = "@(ViewBag.COD_FORMAS_PAGO_FECHAS == null ? "" : Html.Raw((String)ViewBag.COD_FORMAS_PAGO_FECHAS.ToString()).ToString())";

        //console.log("cod_contrato_proyecto"+cod_contrato_proyecto);
        //console.log("cod_factura"+cod_factura);
        //console.log("cod_formas_pago_fechas" + cod_formas_pago_fechas);
        if (args.requestType == "delete" && cod_estado_factura != 1) {
            //console.log("esta en delete y cod estado dif de 1")
            args.cancel = true;
            alert("Esta factura ya está validada");
        } else {
            //console.log("esta en delete en el else del if")
            //console.log(args.data)
        }
        if (args.requestType=="add" && cod_estado_factura!=1){
            //console.log("esta en add")
            args.cancel=true;
            alert("Esta factura ya está validada");
        }else{
            //console.log("esta en add en el else del if")
            //console.log(args.data)
        }

        if (args.requestType == "beginedit") {
            if (cod_estado_factura!=1){
            args.cancel=true;
            alert("Esta factura ya está validada");
            }else{
            // Create grid object.
            var gridObj = $("#GRID_ROLES").ejGrid("instance");
            // Gets the selected row element list
            var vlr = gridObj.getSelectedRecords()[0].VALOR_SIN_IMPUESTOS;
            // Poner en un input hidden
            document.getElementById("h_vlr_sin_impu").value = vlr;
            }
        }


        if (args.requestType == "save") {
            //console.log("esta en save")
            //console.log(args.data)
            args.data.COD_ESTADO_FACTURA = cod_estado_factura;
            args.data.COD_CONTRATO_PROYECTO = cod_contrato_proyecto;
            args.data.COD_FACTURA = cod_factura;
            args.data.COD_FORMAS_PAGO_FECHAS = cod_formas_pago_fechas;
        }
        if (args.requestType == "begin") {
            //console.log("esta en begin")
            args.data.COD_ESTADO_FACTURA = cod_estado_factura;
            args.data.COD_CONTRATO_PROYECTO = cod_contrato_proyecto;
            args.data.COD_FACTURA = cod_factura;
            args.data.COD_FORMAS_PAGO_FECHAS = cod_formas_pago_fechas;
        }

    }
    // Obtener valor a facturar inicial ITEMS R.E.V.
    function inicio_accion_items(args) {




        var cod_fact = "@(ViewBag.COD_FACTURA == null ? "" : Html.Raw((String)ViewBag.COD_FACTURA.ToString()).ToString())";
        var cod_estado_factura=@(ViewBag.COD_ESTADO_FACTURA);
        var cod_contrato_proyecto = "@(ViewBag.COD_CONTRATO_PROYECTO == null ? "" : Html.Raw((String)ViewBag.COD_CONTRATO_PROYECTO.ToString()).ToString())";
        var cod_factura = "@(ViewBag.COD_FACTURA == null ? "" : Html.Raw((String)ViewBag.COD_FACTURA.ToString()).ToString())";
        var cod_formas_pago_fechas = "@(ViewBag.COD_FORMAS_PAGO_FECHAS == null ? "" : Html.Raw((String)ViewBag.COD_FORMAS_PAGO_FECHAS.ToString()).ToString())";

        if (args.requestType == "delete" && cod_estado_factura != 1) {
            //console.log("esta en delete y cod estado dif de 1")
            args.cancel = true;
            alert("Esta factura ya está validada");
        } else {
            //console.log("esta en delete en el else del if")
            //console.log(args.data)
        }

        if (args.requestType == "beginedit") {
            if (cod_estado_factura != 1) {
                args.cancel = true;
                alert("Esta factura ya está validada");
            } else {
                //window.alert("Entro en: inicio_accion_items");
                // Create grid object.
                var gridObj = $("#GRID_ITEMS").ejGrid("instance");
                // Gets the selected row element list
                var vlr = gridObj.getSelectedRecords()[0].VALOR_SIN_IMPUESTOS;
                //window.alert("VALOR_SIN_IMPUESTOS - inicio_accion_roles:" + vlr);
                // Poner en un input hidden
                document.getElementById("h_vlr_sin_impu").value = vlr;
            }
        }

        if (args.requestType == "add" && cod_estado_factura != 1) {
            if (cod_estado_factura != 1) {
                args.cancel = true;
                alert("esta factura ya está validada");
            } else {
                //console.log("esta en add en el else del if")
            }
        }

        if (args.requestType == "save") {

            //args.data.COD_ESTADO_FACTURA = cod_estado_factura;
            args.data.COD_CONTRATO_PROYECTO = cod_contrato_proyecto;
            args.data.COD_FACTURA = cod_factura;
            args.data.COD_FORMAS_PAGO_FECHAS = cod_formas_pago_fechas;

        }

        if (args.requestType == "begin") {

            //args.data.COD_ESTADO_FACTURA = cod_estado_factura;
            args.data.COD_CONTRATO_PROYECTO = cod_contrato_proyecto;
            args.data.COD_FACTURA = cod_factura;
            args.data.COD_FORMAS_PAGO_FECHAS = cod_formas_pago_fechas;

        }


    }

    //Funciones de validación JQUERY VALIDATION
        $(function () {
            //Adicionar a jquery VALIDATION, la revisión del concepto para GRID_ROLES
            $.validator.addMethod("validar_concepto_roles", function (value, element, params) {
                var cod_concep = $("#GRID_ROLESCOD_CONCEPTO_PSL_input").val(); // Valor q viene de la grid
                //window.alert("cod_concep: " + cod_concep);
                return cod_concep != null && cod_concep != 0 && cod_concep != "";
            }, "Se debe seleccionar algún concepto.");
            //Adicionar a jquery VALIDATION, la revisión del valor a facturar(sin impuestos) para GRID_ROLES
            $.validator.addMethod("validacion_causa", function (value, element, params) {
                var vr_sin_impu = 0; var vr_sin_impu_antes = 0; var causa = 0;
                vr_sin_impu = $("#GRID_ROLESVALOR_SIN_IMPUESTOS").val();
                //window.alert("Valor en la GRID: " + vr_sin_impu);
                vr_sin_impu_antes = document.getElementById("h_vlr_sin_impu").value.replace(".", ",");
                //window.alert("Ultimo valor sin imp ANTES: " + vr_sin_impu_antes);
                causa = $("#GRID_ROLESCOD_CAUSA_ESTADO").val(); //;
                if ((vr_sin_impu_antes != vr_sin_impu) && (causa == null || causa == 0 || causa == 1)) { return false }
                else { return true };
            }, "El valor a facturar cambió, por lo tanto se debe indicar la CAUSA por la cual se modificó el valor.");
            //Adicionar a jquery VALIDATION, la revisión del concepto para GRID_ITEMS
            $.validator.addMethod("validar_concepto_items", function (value, element, params) {
                var cod_concep = $("#GRID_ITEMSCOD_CONCEPTO_PSL_input").val(); // Valor q viene de la grid
                //window.alert("cod_concep: " + cod_concep);
                return cod_concep != null && cod_concep != 0 && cod_concep != "";
            }, "Se debe seleccionar algún concepto.");
            //Adicionar a jquery VALIDATION, la revisión del valor a facturar(sin impuestos) para GRID_ITEMS
            $.validator.addMethod("validacion_causa_items", function (value, element, params) {
                var vr_sin_impu = 0; var vr_sin_impu_antes = 0; var causa = 0;
                vr_sin_impu = $("#GRID_ITEMSVALOR_SIN_IMPUESTOS").val();
                //window.alert("Valor en la GRID: " + vr_sin_impu);
                vr_sin_impu_antes = document.getElementById("h_vlr_sin_impu").value.replace(".", ",");
                //window.alert("Ultimo valor sin imp ANTES: " + vr_sin_impu_antes);
                causa = $("#GRID_ITEMSCOD_CAUSA_ESTADO").val(); //;
                if ((vr_sin_impu_antes != vr_sin_impu) && (causa == null || causa == 0 || causa == 1)) { return false }
                else { return true };
            }, "El valor a facturar cambió, por lo tanto se debe indicar la CAUSA por la cual se modificó el valor.");
        });
    </script>
    <script>
        var temp = null;
        $(document).ready(function () {

            $("#personal").sortable({ connectWith: "#items" });
            //Vuelve los ítems "dragable"
            $("#items").sortable({
                change: function (event, ui) {
                    var tipo = ui.item.attr("tipo");
                    var factura_ant = ui.item.attr("factura_ant");
                    var factura_actual = ui.item.attr("factura_actual");
                    var cod_detalle = ui.item.attr("cod_detalle");
                    var url = "../Actualizar_Factura";

                    var data = JSON.stringify({ TIPO: tipo, FACTURA_ANT: factura_ant, FACTURA_ACTUAL: factura_actual, COD_DETALLE: cod_detalle });

                    $.ajax({
                        type: "POST",
                        url: url,
                        data: data,
                        dataType: "json",
                        contentType: "application/json; charset=utf-8",
                        dataFilter: function (data) { return data; },
                        success: function (data) {

                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {

                        }
                    });
                }
            });
            //$("#items").sortable({ connectWith: "#personal"});
        });
        //Función que se activa cuando se cambia la selecciòn del la lista desplegable de fechas de facturas
        function cambio_mes(sender) {

            $(".facturas_ant").hide();
            $(".COD_FECHA_" + sender).show();
        }

        //  OJO MODIFICAR      Funcion para refrescar total
    function refrescar_total() {
        //console.log("esta en reefrescar total")
        var instancia = $("#personal").ejGrid("instance");
        setTimeout(function () { instancia.refreshContent(); }, 1000)
        try {
            var instanciaI = $("#items").ejGrid("instance");
            //var instanciaR = $("#GRID_ROLES").ejGrid("instance");
            setTimeout(function () { instanciaI.refreshContent(); }, 1000);
            //setTimeout(function () { instanciaR.refreshContent(); }, 1000);
        }
        catch{

        }
        var cod_factura =@(ViewBag.COD_FACTURA == null ? "" : Html.Raw((String)ViewBag.COD_FACTURA.ToString()).ToString());
        var data = JSON.stringify({ COD_FACTURA: parseInt(cod_factura) });
        var url = "../refrescar_total";
        //console.log("Va a iniciar post de reefrescar total")
        $.ajax({
            type: "POST",
            url: url,
            data: data,
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            dataFilter: function (data) { return data; },
            success: function (data) {
                //console.log("esta en success de post")
                //console.log(data)
                $('.valor').text(data.responseText);
                
            }
        });

        var id_proyecto = $("#id_proyecto").val();

    }

    </script>


}

