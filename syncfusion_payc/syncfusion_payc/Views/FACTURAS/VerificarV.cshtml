@using Syncfusion.JavaScript
@using System.Collections.Generic
@using System.Linq

@model IEnumerable<syncfusion_payc.Models.FACTURAS>

@{
    ViewBag.Title = "";
}

@if (User.Identity.IsAuthenticated)
{
    <h4>DESCRIPCION PROYECTO: @Html.ViewBag.DESCRIPCION_PROYECTO - PERIODO:@Html.ViewBag.PERIODO_FACTURAR</h4>

    <!--FILA GRIDS-->
    <div class="row">
        <!--GRID ROLES-->
        <div class="col-md-6">
            <div class="control-section">
                @(Html.EJ().Grid<object>("GRID_PERSONAS")
                                                                 //@(Html.EJ().Grid<OrdersView>("Grid")
                                                                 //.Datasource(ds => ds.URL("../../FACTURAS/GetOrderData").Adaptor(AdaptorType.UrlAdaptor))
                                                                 .Datasource(datasource => datasource.Json((IEnumerable<object>)ViewBag.datasource2).Adaptor(AdaptorType.RemoteSaveAdaptor))
                                                                 .AllowSorting()
                                                                 .AllowPaging()
                                                                 .SelectionType(SelectionType.Multiple)
                                                                 .AllowRowDragAndDrop()
                                                                 .RowDropSettings(drop => drop.RowDropMapper("RowDropHandler"))
                                                                 .Columns(col =>
                                                                 {
                                                                     col.Field("COD_CONTRATO_PROYECTO").Visible(true).HeaderText("COD_CONTRATO_PROYECTO").Add();
                                                                     col.Field("COD_FACTURA").Visible(true).HeaderText("COD_FACTURA").Add();


                                                                 }))

            </div>
            <div class="form-group CIUDAD col-md-6">
                <label name="contratista">CIUDAD</label>

            </div>
            <div class="form-group CAPITULO" style="margin-left:5px;">
                <label name="capitulo">CAPITULO</label>
            </div>

            <fieldset>

                <H4>ITEMS MES ANTERIOR POR AGREGAR</H4>
                <div class="form-group">
                    <label>MESES ANTERIORES</label>
                    @Html.EJ().DropDownList("FECHA").Datasource().DropDownListFields(df => df.Text("FECHA_FACTURAS").Value("COD_FORMAS_PAGO_FECHAS")).EnableIncrementalSearch(true).EnableFilterSearch(true).FilterType(SearchFilterType.StartsWith).CaseSensitiveSearch(false).ShowRoundedCorner(true).ClientSideEvents(x => x.Change("cambio_mes")).WatermarkText("Seleccione la fecha de la factura")

                </div>
                <div class="col-md-6">


                    <table>
                        <thead>
                            <tr>
                                <th>FACTURA</th>
                                <th>PROYECTO</th>
                                <th>VALOR</th>
                            </tr>
                        </thead>
                        <ol>
                            <tbody id="personal">
                                @foreach (var a in ViewBag.datasource2)
                                {

                                    string COD_FACTURA = a.COD_FACTURA.ToString();
                                    string COD_CONTRATO_PROYECTO = a.COD_CONTRATO_PROYECTO.ToString();
                                    string VALOR_SIN_IMPUESTOS = a.VALOR_SIN_IMPUESTOS.ToString();
                                    string COD_FORMAS_PAGO_FECHA = a.COD_FORMAS_PAGO_FECHAS.ToString();
                            
                            <tr class="s_panel facturas_ant FACTURA_@COD_FACTURA COD_FECHA_@COD_FORMAS_PAGO_FECHA">
                                <td id="personal">@a.COD_FACTURA</td>
                                <td id="personal">@a.PERIODO_FACTURA</td>
                                <td id="personal">@a.VALOR_SIN_IMPUESTOS</td>

                            </tr>
                            }
                            </tbody>
                        </ol>
                    </table>
                </div>
            </fieldset>

            <div class="row">
                <div class="col-md-12">
                    <table class="col-md-12">
                        <tbody>
                            <tr class="fila_total">
                                <th class="titulo_total"><b>Total personal:</b></th>
                                <th class="total"><span class="valor_personas">@(ViewBag.TOTAL_FACTURA_PERS)</span></th>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            <input type="hidden" id="h_vlr_sin_impu" value="">  @**@
        </div>


        <!--GRID ITEMS-->
        <div class="col-md-6">
            <div class="control-section">
                
                    @(Html.EJ().Grid<object>("GRID_ITEMS")
                                                             //@(Html.EJ().Grid<OrdersView>("Grid")
                                                             //.Datasource(ds => ds.URL("../../FACTURAS/GetOrderData").Adaptor(AdaptorType.UrlAdaptor))
                                                             .Datasource(datasource => datasource.Json((IEnumerable<object>)ViewBag.datasource3).Adaptor(AdaptorType.RemoteSaveAdaptor))
                                                             .AllowSorting()
                                                             .AllowPaging()
                                                             .SelectionType(SelectionType.Multiple)
                                                             .AllowRowDragAndDrop()
                                                             .RowDropSettings(drop => drop.RowDropMapper("RowDropHandler"))
                                                             .Columns(col =>
                                                             {
                                                                 col.Field("COD_CONTRATO_PROYECTO").Visible(true).HeaderText("COD_CONTRATO_PROYECTO").Add();
                                                                 col.Field("COD_FACTURA").Visible(true).HeaderText("COD_FACTURA").Add();
                                                             }))
                
            </div>
            <fieldset>
                <h4>ITEMS A FACTUTAR</h4>
                <div class="col-md-6">
                    
                    <table>
                        <thead>
                            <tr>
                                <th>FACTURA</th>
                                <th>PROYECTO</th>
                                <th>VALOR</th>
                            </tr>
                        </thead>
                        
                        <tbody id="items">
                            @foreach (var b in ViewBag.datasource3)
                            {

                                string COD_FACTURA = b.COD_FACTURA.ToString();
                                string COD_CONTRATO_PROYECTO = b.COD_CONTRATO_PROYECTO.ToString();
                                string VALOR_SIN_IMPUESTOS = b.VALOR_SIN_IMPUESTOS.ToString();
                                
                                <tr class="FACTURA_@COD_FACTURA">
                                    <td>@b.COD_FACTURA</td>
                                    <td class="taskSingleInline" id="task@(b.COD_FACTURA)" data-taskid="@(b.COD_FACTURA)">@b.COD_CONTRATO_PROYECTO</td>
                                    <td>@b.VALOR_SIN_IMPUESTOS</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <a class="btn btn=primary" href="@Url.Action("VerificarV","FACTURASControllers")">UPDATE POSITION</a>
                </div>
            </fieldset>
            
            <div class="row">
                <div class="col-md-12">
                    <table class="col-md-12">
                        <tbody>
                            <tr class="fila_total">
                                <th class="titulo_total"><b>Total ítems:</b></th>
                                @*<th class="total"><span class="valor_item">@(ViewBag.TOTAL_FACTURA_ITEM_)</span></th>*@
                                @*<th class="total"><span class="valor">@(ViewBag.TOTAL)</span></th>*@
                                <th class="total"><span class="valor_items">@(ViewBag.TOTAL_FACTURA_ITEM)</span></th>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!--FILA TOTAL-->
    <div class="row">
        <div class="col-md-12">
            <table class="col-md-12">

                <tbody>
                    <tr class="fila_total">
                        <th class="titulo_total"><b>Total</b></th>
                        <th class="total"><span class="valor">@(ViewBag.TOTAL_FACTURA == null ? "" : Html.Raw((String)ViewBag.TOTAL_FACTURA.ToString()).ToString())</span></th>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!--FILA BOTONES-->
    <div class="row">
        <div class="col-md-6">
            <input type="button" value="Validar" class="btn btn-purple" onclick="validar_factura()" />
            <input type="button" value="Volver" class="btn btn-purple" onclick="redireccionar_index_facturas()" />
        </div>
    </div>
}



    <style type="text/css">


        ol {
            list-style-type: none;
            width: 550px;
            height: 500px auto;
            margin: 5px;
        }







        #personal td{

            background-color: cornflowerblue;
            padding: 5px;
            border-radius: 5px;
            margin: 3px;
        }



        #items td {
            background-color:  #ccc;
            padding: 5px;
            border-radius: 5px;
            margin: 3px;
        }



        fieldset {
            height: 0 auto;
            width: 550px;
            padding: 0 10px;
            border: 3px solid #ccc;
            margin: 10px;
            border-radius: 10px;
        }
    </style>
    <script>

        $(document).ready(function () {

            $("#personal")//.accordion({collapsible: true,active: false,})
                          .sortable({ connectWith: "#items" });

            $("#items").sortable({
               
                connectWith: "#personal"
            });

            //$(document).ready(function () {
            //    $('#accordion').accordion({
            //        collapsible: true,
            //        active: false,
            //        height: 'fill',
            //        header: 'h3'
            //    }).sortable({items: '.s_panel'});
            //});

            $("#items").sortable({
                update: function (event, ui) {
                    var itemsIds = "";
                    $("#items").find(".cambiarcod").each(function () {
                        var itemId = $(this).attr("data-taskid");
                        itemIds = itemIds + itemId + ",";
                    });
                    $.ajax({
                        url: '@Url.Action("UpdateItem", "TaskBoard")',
                        data: { itemsIds: itemsIds },
                        type: 'POST',
                        success: function (data) {

                        },
                        error: function (xhr, status, error) {
                        },

                    });
                }
            });
             
                  


         
        });
        


    </script>
<script type="text/javascript">
    //val = $("#e-summaryrow.e-scroller").val();
    //console.log(val)
    //text = $("#e-summaryrow.e-scroller").text();
    //console.log(text)

    ////value = $("#e-summaryrow e-scroller").value();
    ////console.log(value)

    //hmtlaa= $("#e-summaryrow.e-scroller").html();
    //console.log(hmtlaa)

    //textOfTdhtml = $("#e-summaryrow.e-scroller").find(".class").text();
    //console.log(textOfTdhtml)

    //textOfTdhtext = $("#e-summaryrow.e-scroller").find(".class").text();
    //console.log(textOfTdhtext)

    //console.log("va a empezar el jquery")
    //$("tbody").find("tr").each(function () { //get all rows in table
    //    var ratingTdText = $(this).find('td.e-summaryrow.e-scroller').text();
    //    console.log(ratingTdText)
    //    var aa = $(this).find('td.e-summaryrow.e-scroller');
    //    console.log(aa)
    //});
    //console.log("fin del jquery")



    //$("tbody").find("tr").each(function () { //get all rows in table
    //    var ratingTdText = $(this).find('td.actionclass').text();
    //    if ((ratingTdText == "saved block")) {
    //        this.innerHTML = 'changed';
    //    }
    //});



    //$("tbody").find("tr").each(function () { //get all rows in table
    //    var ratingTd = $(this).find('td.actionclass');//Refers to TD element
    //    if (ratingTd.text() == "saved block") {
    //        ratingTd.text('changed');
    //    }
    //});


    //$(".e-summaryrow e-scroller").mouseenter(function () {
    //    var a = $(this).text();
    //});

    //$(".item-model-number .value").each(function () {
    //    var value = $(this).text();
    //    console.log(value);
    //})


    function redireccionar_index_facturas() {
        window.location = "../Index";
    }
    //Traducción
    $(document).ready(function () {
        ej.Grid.Locale["es-CO"] = {
            EmptyRecord: "No hay registros que mostrar",
            GroupDropArea: "Arrastre un encabezado de columna aquí para agrupar su columna",
            DeleteOperationAlert: "No hay registros seleccionados para la operación de eliminación",
            EditOperationAlert: "No hay registros seleccionados para la operación de edición",
            SaveButton: "Guardar",
            OKButton: "DE ACUERDO",
            CancelButton: "Cancelar",
            EditFormTitle: "Detalles de ",
            AddFormTitle: "Añadir nuevo registro",
            GroupCaptionFormat: "{{:headerText}}: {{:key}} - {{:count}} {{if count == 1 }} ítem {{else}} artículos {{/if}} ",
        };
        ej.Pager.Locale["es-CO"] = {
            pagerInfo: "{0} de {1} páginas ({2} artículos)",
            firstPageTooltip: "Ir a la primera página",
            lastPageTooltip: "Ir a la última página",
            nextPageTooltip: "Ir a la página siguiente",
            previousPageTooltip: "Ir a la página anterior",
            nextPagerTooltip: "Ir al siguiente Pager",
            previousPagerTooltip: "Ir a Pager anterior"
        };
        ej.ExcelFilter.Locale["es-CO"] = {
            SortNoSmaller: "Ordenar de menor a mayor",
            SortNoLarger: "Ordenar de mayor a menor",
            SortTextAscending: "Ordenar de A a Z",
            SortTextDescending: "Ordenar de Z a A",
            SortDateOldest: "Ordenar por Más antiguos",
            SortDateNewest: "Ordenar por Más reciente",
            SortByColor: "Ordenar por color",
            SortByCellColor: "Ordenar por color de la célula",
            SortByFontColor: "Ordenar por Color de fuente",
            FilterByColor: "Filtrar por color",
            CustomSort: "Orden personalizado",
            FilterByCellColor: "Filtrar por color de la célula",
            FilterByFontColor: "Filtrar por color de fuente",
            ClearFilter: "Borrar filtro",
            NumberFilter: "Número Filtros",
            GuidFilter: "Gud Filtros",
            TextFilter: "Filtros de texto",
            DateFilter: "Filtros de fecha",
            DateTimeFilter: "Fecha filtros de tiempo",
            SelectAll: "Seleccionar todo",
            Blanks: "Los espacios en blanco",
            Search: "Buscar",
            Showrowswhere: "Mostrar filas",
            NumericTextboxWaterMark: "introducir el valor",
            StringMenuOptions: [{ text: "Igual", value: "equal" }, { text: "No es equal", value: "notequal" }, { text: "Comienza con", value: "startswith" }, { text: "Termina con", value: "endswith" }, { text: "contiene", value: "contains" }, { text: "Filtro personalizado", value: "customfilter" },],
            NumberMenuOptions: [{ text: "Igual", value: "equal" }, { text: "No es equal", value: "notequal" }, { text: "Menos que", value: "lessthan" }, { text: "Menor o equal", value: "lessthanorequal" }, { text: "Mas grande que", value: "greaterthan" }, { text: "Mayor que o equal", value: "greaterthanorequal" }, { text: "Entre", value: "between" }, { text: "Filtro personalizado", value: "customfilter" },],
            GuidMenuOptions: [{ text: "Igual", value: "equal" }, { text: "No es equal", value: "notequal" }, { text: "Filtro personalizado", value: "customfilter" },],
            DateMenuOptions: [{ text: "Igual", value: "equal" }, { text: "No es equal", value: "notequal" }, { text: "Menos que", value: "lessthan" }, { text: "Menor o equal", value: "lessthanorequal" }, { text: "Mas grande que", value: "greaterthan" }, { text: "Mayor que o equal", value: "greaterthanorequal" }, { text: "Entre", value: "between" }, { text: "Filtro personalizado", value: "customfilter" },],
            DatetimeMenuOptions: [{ text: "Igual", value: "equal" }, { text: "No es equal", value: "notequal" }, { text: "Menos que", value:"lessthan" }, { text: "Menor o equal", value: "lessthanorequal" }, { text: "Mas grande que", value: "greaterthan" }, { text: "Mayor que o equal", value: "greaterthanorequal" }, { text: "Entre", value: "between" }, { text: "Filtro personalizado", value: "customfilter" },],
            Top10MenuOptions: [{ text: "Parte superior", value: "top" }, { text: "Fondo", value: "bottom" },],
            title: "Filtro personalizado",
            PredicateAnd: "Y",
            PredicateOr: "O",
            Ok: "Aceptar",
            MatchCase: "Coincidencia",
            Cancel: "Cancelar",
            NoResult: "No se encontraron coincidencias",
            CheckBoxStatusMsg: "No todos los elementos que muestran",
            DatePickerWaterMark: "Seleccione fecha",
            DateTimePickerWaterMark: "Seleccionar fecha y hora",
            True: "cierto",
            False: "falso"
        };
    });


    //Función que se ejecuta en el evento load
    function inicio_grid_items(args) {

        var cod_contrato_proyecto = "@(ViewBag.COD_CONTRATO_PROYECTO == null ? "" : Html.Raw((String)ViewBag.COD_CONTRATO_PROYECTO.ToString()).ToString())";
        if (cod_contrato_proyecto != "") {
            this.model.filterSettings.filteredColumns.push({ field: "COD_CONTRATO_PROYECTO", operator: "equal", value: cod_contrato_proyecto });
        }
        var COD_FACTURA = "@(ViewBag.COD_FACTURA == null ? "" : Html.Raw((String)ViewBag.COD_FACTURA.ToString()).ToString())";
        if (COD_FACTURA != "") {
            this.model.filterSettings.filteredColumns.push({ field: "COD_FACTURA", operator: "equal", value: COD_FACTURA });
        }
        var COD_FORMAS_PAGO_FECHAS = "@(ViewBag.COD_FORMAS_PAGO_FECHAS == null ? "" : Html.Raw((String)ViewBag.COD_FORMAS_PAGO_FECHAS.ToString()).ToString())";
        if (COD_FORMAS_PAGO_FECHAS != "") {
            this.model.filterSettings.filteredColumns.push({ field: "COD_FORMAS_PAGO_FECHAS", operator: "equal", value: COD_FORMAS_PAGO_FECHAS });
        }
        var COD_ESTADO_DETALLE = "1";
        if (COD_ESTADO_DETALLE != "") {
            this.model.filterSettings.filteredColumns.push({ field: "COD_ESTADO_DETALLE", operator: "equal", value: COD_ESTADO_DETALLE});
        }

        refrescar_total();
    }



    //Función que se ejecuta en el evento load
    function inicio_grid_roles(args) {
        //console.log("esta en inicio_grid_roles ")
        var cod_contrato_proyecto = "@(ViewBag.COD_CONTRATO_PROYECTO == null ? "" : Html.Raw((String)ViewBag.COD_CONTRATO_PROYECTO.ToString()).ToString())";
        if (cod_contrato_proyecto != "") {
            this.model.filterSettings.filteredColumns.push({ field: "COD_CONTRATO_PROYECTO", operator: "equal", value: cod_contrato_proyecto });
        }

        var COD_FACTURA = "@(ViewBag.COD_FACTURA == null ? "" : Html.Raw((String)ViewBag.COD_FACTURA.ToString()).ToString())";
        if (COD_FACTURA != "") {
            this.model.filterSettings.filteredColumns.push({ field: "COD_FACTURA", operator: "equal", value: COD_FACTURA });
        }
        //var COD_FORMAS_PAGO_FECHAS = "@(ViewBag.COD_FORMAS_PAGO_FECHAS == null ? "" : Html.Raw((String)ViewBag.COD_FORMAS_PAGO_FECHAS.ToString()).ToString())";
        //if (COD_FORMAS_PAGO_FECHAS != "") {
        //    this.model.filterSettings.filteredColumns.push({ field: "COD_FORMAS_PAGO_FECHAS", operator: "equal", value: COD_FORMAS_PAGO_FECHAS });
        //}
        //var COD_ESTADO_DETALLE = "1";
        //if (COD_ESTADO_DETALLE != "") {
        //    this.model.filterSettings.filteredColumns.push({ field: "COD_ESTADO_DETALLE", operator: "equal", value: COD_ESTADO_DETALLE});
        //}
        refrescar_total();
    }

    //Función que se ejecuta en el evento load
    function inicio_grid_roles1(args) {


        var COD_FACTURA = "@(ViewBag.COD_FACTURA == null ? "" : Html.Raw((String)ViewBag.COD_FACTURA.ToString()).ToString())";
        if (COD_FACTURA != "") {
            this.model.filterSettings.filteredColumns.push({ field: "COD_FACTURA", operator: "equal", value: COD_FACTURA });
        }
        var COD_FORMAS_PAGO_FECHAS = "@(ViewBag.COD_FORMAS_PAGO_FECHAS == null ? "" : Html.Raw((String)ViewBag.COD_FORMAS_PAGO_FECHAS.ToString()).ToString())";
        if (COD_FORMAS_PAGO_FECHAS != "") {
            this.model.filterSettings.filteredColumns.push({ field: "COD_FORMAS_PAGO_FECHAS", operator: "equal", value: COD_FORMAS_PAGO_FECHAS });
        }
    }

    //Función click en los elementos nuevos
    function clicked(sender) {
        var cod_contrato_proyecto = "@(ViewBag.COD_CONTRATO_PROYECTO == null ? "" : Html.Raw((String)ViewBag.COD_CONTRATO_PROYECTO.ToString()).ToString())";
        var cod_factura =@(ViewBag.COD_FACTURA == null ? "" : Html.Raw((String)ViewBag.COD_FACTURA.ToString()).ToString());
        var estado_factura = "@(ViewBag.ESTADO_FACTURA == null ? "" : Html.Raw((String)ViewBag.ESTADO_FACTURA.ToString()).ToString())";
        //$(".contenedor_loader1").show();
        //Exportación a excel
        if (sender.itemName == "Excel Export") {
            var grid = $('#Grid_Adjunto').ejGrid('instance');
            if (estado_factura == "1" || estado_factura == "2") {
                alert("La factura no ha sido enviada a PSL, y por lo tanto, no esta habilitada para la generación del archivo adjunto.");
                $(".contenedor_loader1").hide();
            }
            else {
                var data = JSON.stringify({ gridModel: JSON.stringify(grid.model), COD_FACTURA: parseInt(cod_factura), COD_CONTRATO_PROYECTO: cod_contrato_proyecto });
                var url = "../../VISTA_DETALLE_ADJUNTOS_PERS/ExcelExport";
                $.ajax({
                    type: "POST",
                    url: url,
                    data: data,
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    dataFilter: function (data) { return data; },
                    success: function (data) {
                        var url = "../../VISTA_DETALLE_ADJUNTOS_PERS/adjuntosfactura/Adjunto_" + data.result + ".xlsx";
                        var win = window.open(url, '_blank');
                        win.focus();
                        $(".contenedor_loader1").hide();
                    },
                    error: function (data) {
                        alert("Ha ocurrido un error inesperado. Por favor vuelva a intentarlo. Si el problema persiste, contacte al administrador del sistema.")
                        $(".contenedor_loader1").hide();
                    }

                });
            }

        }
    }

    function validar_factura() {
        var cod_contrato_proyecto = "@(ViewBag.COD_CONTRATO_PROYECTO == null ? "" : Html.Raw((String)ViewBag.COD_CONTRATO_PROYECTO.ToString()).ToString())";
        var cod_factura = "@(ViewBag.COD_FACTURA == null ? "" : Html.Raw((String)ViewBag.COD_FACTURA.ToString()).ToString())";
        var cod_formas_pago_fechas = "@(ViewBag.COD_FORMAS_PAGO_FECHAS == null ? "" : Html.Raw((String)ViewBag.COD_FORMAS_PAGO_FECHAS.ToString()).ToString())";
        var data = JSON.stringify({ COD_CONTRATO_PROYECTO: parseInt(cod_contrato_proyecto), COD_FACTURA: parseInt(cod_factura), COD_FORMAS_PAGO_FECHAS: parseInt(cod_formas_pago_fechas) });
        var estado_factura = "@(ViewBag.ESTADO_FACTURA == null ? "" : Html.Raw((String)ViewBag.ESTADO_FACTURA.ToString()).ToString())";
        //alert(estado_factura);
        if (estado_factura == "1" || estado_factura == "2") {
            var url = "../validar_factura";
            $.ajax({
                type: "POST",
                url: url,
                data: data,
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                dataFilter: function (data) { return data; },
                success: function (data) {
                    if (data.responseText == "SI") {
                        alert("Existen errores en los valores a facturar, por favor verifique que todos los elementos estan asociados a un concepto de PSL");
                    }
                    else {
                        alert("Factura verificada con éxito");
                        window.location = "../Index";
                    }
                }
            });
        }
        else {
            alert("Error al verificar. La factura no se encuentra pendiente de envío a PSL o de revisión.")
        }
    }
    //Función que refresca la grid hijo de facturas después
    function finalizar_accion(args) {
        //console.log(args.requestType )
        //console.log("esta en finalizar accion")
        if (args.requestType == "save" || args.requestType == "delete") {
            //console.log("esta en save de finalizar accion")
            refrescar_total();
        }
    }
    //Funcion para refrescar total
    function refrescar_total() {
        //console.log("esta en reefrescar total")
        var instancia = $("#GRID_ROLES").ejGrid("instance");
        setTimeout(function () { instancia.refreshContent(); }, 1000)
        try {
            var instanciaI = $("#GRID_ITEMS").ejGrid("instance");
            //var instanciaR = $("#GRID_ROLES").ejGrid("instance");
            setTimeout(function () { instanciaI.refreshContent(); }, 1000);
            //setTimeout(function () { instanciaR.refreshContent(); }, 1000);
        }
        catch{

        }
        var cod_factura =@(ViewBag.COD_FACTURA == null ? "" : Html.Raw((String)ViewBag.COD_FACTURA.ToString()).ToString());
        var data = JSON.stringify({ COD_FACTURA: parseInt(cod_factura) });
        var url = "../refrescar_total";
        //console.log("Va a iniciar post de reefrescar total")
        $.ajax({
            type: "POST",
            url: url,
            data: data,
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            dataFilter: function (data) { return data; },
            success: function (data) {
                //console.log("esta en success de post")
                //console.log(data)
                $('.valor').text(data.responseText);
                $('.valor_personas').text(data.total_factura_pers);
                $('.valor_items').text(data.total_factura_item);
            }
        });
    }
    //Función que permite verificar las facturas
    function ver_adjunto_factura() {
        //alert("verificar");
        //Validar que el estado sea correcto para verificar
        var cod_fact = "@(ViewBag.COD_FACTURA == null ? "" : Html.Raw((String)ViewBag.COD_FACTURA.ToString()).ToString())";
        window.location = "../Adjunto/" + cod_fact;
        }
    //funcion que se ejecuta al inicio de las acciones de la grid roles
    function inicio_accion_roles(args) {

        var cod_estado_factura=@(ViewBag.COD_ESTADO_FACTURA);
        //console.log("esta en accion inicio_accion_roles")
        //console.log("cod_estado_factura"+cod_estado_factura);
        var cod_contrato_proyecto = "@(ViewBag.COD_CONTRATO_PROYECTO == null ? "" : Html.Raw((String)ViewBag.COD_CONTRATO_PROYECTO.ToString()).ToString())";
        var cod_factura = "@(ViewBag.COD_FACTURA == null ? "" : Html.Raw((String)ViewBag.COD_FACTURA.ToString()).ToString())";
        var cod_formas_pago_fechas = "@(ViewBag.COD_FORMAS_PAGO_FECHAS == null ? "" : Html.Raw((String)ViewBag.COD_FORMAS_PAGO_FECHAS.ToString()).ToString())";

        //console.log("cod_contrato_proyecto"+cod_contrato_proyecto);
        //console.log("cod_factura"+cod_factura);
        //console.log("cod_formas_pago_fechas" + cod_formas_pago_fechas);
        if (args.requestType == "delete" && cod_estado_factura != 1) {
            //console.log("esta en delete y cod estado dif de 1")
            args.cancel = true;
            alert("Esta factura ya está validada");
        } else {
            //console.log("esta en delete en el else del if")
            //console.log(args.data)
        }
        if (args.requestType=="add" && cod_estado_factura!=1){
            //console.log("esta en add")
            args.cancel=true;
            alert("Esta factura ya está validada");
        }else{
            //console.log("esta en add en el else del if")
            //console.log(args.data)
        }

        if (args.requestType == "beginedit") {
            if (cod_estado_factura!=1){
            args.cancel=true;
            alert("Esta factura ya está validada");
            }else{
            // Create grid object.
            var gridObj = $("#GRID_ROLES").ejGrid("instance");
            // Gets the selected row element list
            var vlr = gridObj.getSelectedRecords()[0].VALOR_SIN_IMPUESTOS;
            // Poner en un input hidden
            document.getElementById("h_vlr_sin_impu").value = vlr;
            }
        }


        if (args.requestType == "save") {
            //console.log("esta en save")
            //console.log(args.data)
            args.data.COD_ESTADO_FACTURA = cod_estado_factura;
            args.data.COD_CONTRATO_PROYECTO = cod_contrato_proyecto;
            args.data.COD_FACTURA = cod_factura;
            args.data.COD_FORMAS_PAGO_FECHAS = cod_formas_pago_fechas;
        }
        if (args.requestType == "begin") {
            //console.log("esta en begin")
            args.data.COD_ESTADO_FACTURA = cod_estado_factura;
            args.data.COD_CONTRATO_PROYECTO = cod_contrato_proyecto;
            args.data.COD_FACTURA = cod_factura;
            args.data.COD_FORMAS_PAGO_FECHAS = cod_formas_pago_fechas;
        }

    }
    // Obtener valor a facturar inicial ITEMS R.E.V.
    function inicio_accion_items(args) {
        var cod_fact = "@(ViewBag.COD_FACTURA == null ? "" : Html.Raw((String)ViewBag.COD_FACTURA.ToString()).ToString())";
        var cod_estado_factura=@(ViewBag.COD_ESTADO_FACTURA);
        var cod_contrato_proyecto = "@(ViewBag.COD_CONTRATO_PROYECTO == null ? "" : Html.Raw((String)ViewBag.COD_CONTRATO_PROYECTO.ToString()).ToString())";
        var cod_factura = "@(ViewBag.COD_FACTURA == null ? "" : Html.Raw((String)ViewBag.COD_FACTURA.ToString()).ToString())";
        var cod_formas_pago_fechas = "@(ViewBag.COD_FORMAS_PAGO_FECHAS == null ? "" : Html.Raw((String)ViewBag.COD_FORMAS_PAGO_FECHAS.ToString()).ToString())";

        if (args.requestType == "delete" && cod_estado_factura != 1) {
            //console.log("esta en delete y cod estado dif de 1")
            args.cancel = true;
            alert("Esta factura ya está validada");
        } else {
            //console.log("esta en delete en el else del if")
            //console.log(args.data)
        }

        if (args.requestType == "beginedit") {
            if (cod_estado_factura != 1) {
                args.cancel = true;
                alert("Esta factura ya está validada");
            } else {
                //window.alert("Entro en: inicio_accion_items");
                // Create grid object.
                var gridObj = $("#GRID_ITEMS").ejGrid("instance");
                // Gets the selected row element list
                var vlr = gridObj.getSelectedRecords()[0].VALOR_SIN_IMPUESTOS;
                //window.alert("VALOR_SIN_IMPUESTOS - inicio_accion_roles:" + vlr);
                // Poner en un input hidden
                document.getElementById("h_vlr_sin_impu").value = vlr;
            }
        }

        if (args.requestType == "add" && cod_estado_factura != 1) {
            if (cod_estado_factura != 1) {
                args.cancel = true;
                alert("esta factura ya está validada");
            } else {
                //console.log("esta en add en el else del if")
            }
        }

        if (args.requestType == "save") {

            //args.data.COD_ESTADO_FACTURA = cod_estado_factura;
            args.data.COD_CONTRATO_PROYECTO = cod_contrato_proyecto;
            args.data.COD_FACTURA = cod_factura;
            args.data.COD_FORMAS_PAGO_FECHAS = cod_formas_pago_fechas;

        }

        if (args.requestType == "begin") {

            //args.data.COD_ESTADO_FACTURA = cod_estado_factura;
            args.data.COD_CONTRATO_PROYECTO = cod_contrato_proyecto;
            args.data.COD_FACTURA = cod_factura;
            args.data.COD_FORMAS_PAGO_FECHAS = cod_formas_pago_fechas;

        }


    }

    //Funciones de validación JQUERY VALIDATION
        $(function () {
            //Adicionar a jquery VALIDATION, la revisión del concepto para GRID_ROLES
            $.validator.addMethod("validar_concepto_roles", function (value, element, params) {
                var cod_concep = $("#GRID_ROLESCOD_CONCEPTO_PSL_input").val(); // Valor q viene de la grid
                //window.alert("cod_concep: " + cod_concep);
                return cod_concep != null && cod_concep != 0 && cod_concep != "";
            }, "Se debe seleccionar algún concepto.");
            //Adicionar a jquery VALIDATION, la revisión del valor a facturar(sin impuestos) para GRID_ROLES
            $.validator.addMethod("validacion_causa", function (value, element, params) {
                var vr_sin_impu = 0; var vr_sin_impu_antes = 0; var causa = 0;
                vr_sin_impu = $("#GRID_ROLESVALOR_SIN_IMPUESTOS").val();
                //window.alert("Valor en la GRID: " + vr_sin_impu);
                vr_sin_impu_antes = document.getElementById("h_vlr_sin_impu").value.replace(".", ",");
                //window.alert("Ultimo valor sin imp ANTES: " + vr_sin_impu_antes);
                causa = $("#GRID_ROLESCOD_CAUSA_ESTADO").val(); //;
                if ((vr_sin_impu_antes != vr_sin_impu) && (causa == null || causa == 0 || causa == 1)) { return false }
                else { return true };
            }, "El valor a facturar cambió, por lo tanto se debe indicar la CAUSA por la cual se modificó el valor.");
            //Adicionar a jquery VALIDATION, la revisión del concepto para GRID_ITEMS
            $.validator.addMethod("validar_concepto_items", function (value, element, params) {
                var cod_concep = $("#GRID_ITEMSCOD_CONCEPTO_PSL_input").val(); // Valor q viene de la grid
                //window.alert("cod_concep: " + cod_concep);
                return cod_concep != null && cod_concep != 0 && cod_concep != "";
            }, "Se debe seleccionar algún concepto.");
            //Adicionar a jquery VALIDATION, la revisión del valor a facturar(sin impuestos) para GRID_ITEMS
            $.validator.addMethod("validacion_causa_items", function (value, element, params) {
                var vr_sin_impu = 0; var vr_sin_impu_antes = 0; var causa = 0;
                vr_sin_impu = $("#GRID_ITEMSVALOR_SIN_IMPUESTOS").val();
                //window.alert("Valor en la GRID: " + vr_sin_impu);
                vr_sin_impu_antes = document.getElementById("h_vlr_sin_impu").value.replace(".", ",");
                //window.alert("Ultimo valor sin imp ANTES: " + vr_sin_impu_antes);
                causa = $("#GRID_ITEMSCOD_CAUSA_ESTADO").val(); //;
                if ((vr_sin_impu_antes != vr_sin_impu) && (causa == null || causa == 0 || causa == 1)) { return false }
                else { return true };
            }, "El valor a facturar cambió, por lo tanto se debe indicar la CAUSA por la cual se modificó el valor.");
    });

    //Función que se activa cuando se cambia la selecciòn del la lista desplegable de fechas de facturas
    function cambio_mes(sender) {
        
        $(".facturas_ant").hide();
        $(".COD_FECHA_" + sender.value).show();
    }
</script>