@using Syncfusion.JavaScript
@using System.Collections.Generic
@using System.Linq

@model IEnumerable<syncfusion_payc.Models.FACTURAS>

@{
    ViewBag.Title = "";
}


<h4>DESCRIPCION PROYECTO: @Html.ViewBag.DESCRIPCION_PROYECTO - PERIODO:@Html.ViewBag.PERIODO_FACTURAR</h4>

<!--FILA GRIDS-->
<div class="row">
    <!--GRID ROLES-->
    <div class="col-md-12">
        <div class="control-section">
            @(Html.EJ().Grid<syncfusion_payc.Models.VISTA_DETALLE_ADJUNTOS_PERS>("Grid_Adjunto")
                                    .Datasource(ds => ds.URL("../../VISTA_DETALLE_ADJUNTOS_PERS/GetOrderData").InsertURL("../../VISTA_DETALLE_ADJUNTOS_PERS/PerformInsert").UpdateURL("../../VISTA_DETALLE_ADJUNTOS_PERS/PerformUpdate").RemoveURL("../../VISTA_DETALLE_ADJUNTOS_PERS/PerformDelete").Adaptor(AdaptorType.UrlAdaptor))
                                    .AllowPaging()
                                    .AllowFiltering()
                                    .Locale("es-CO")
                                    .AllowResizeToFit(true)
                                    .AllowMultiSorting()
                                    .AllowSorting()
                                    .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
                                    .EditSettings(edit => { edit.AllowAdding(false).AllowDeleting(false).AllowEditing().EditMode(EditMode.Dialog); })
                                    .ClientSideEvents(e => e.Load("inicio_grid_roles").ToolbarClick("clicked"))
                                    //.Mappers(map => map.ExportToExcelAction("../../VISTA_DETALLE_ADJUNTOS_PERS/ExportToExcel"))
                                    .AllowMultipleExporting()
                                    .ToolbarSettings(toolbar =>
                                    {
                                        toolbar.ShowToolbar().ToolbarItems(items =>
                                        {
                                            items.AddTool(ToolBarItems.Add);
                                            items.AddTool(ToolBarItems.Edit);
                                            items.AddTool(ToolBarItems.Delete);
                                            items.AddTool(ToolBarItems.Update);
                                            items.AddTool(ToolBarItems.Cancel);
                                            items.AddTool(ToolBarItems.ExcelExport);
                                        });

                                    }).Columns(col =>
                                    {
                                        col.Field("ID").Width(200).HeaderText("ID").IsPrimaryKey(true).IsIdentity(true).Visible(false).EditType(EditingType.NumericEdit).ValidationRules(v => v.AddRule("number", true)).Add();
                                        col.Field("CENTRO_COSTOS").Visible(false).HeaderText("CENTRO COSTOS").Add();
                                        col.Field("NOMBRE_PROYECTO").Visible(false).HeaderText("DESCRIPCIÓN").Add();
                                        col.Field("COD_DETALLE_FACTURA_ADJUNTO_PERS").HeaderText("COD_DETALLE_FACTURA_ADJUNTO_PERS").Visible(false).Format("{0:n0}").EditType(EditingType.NumericEdit).ValidationRules(v => v.AddRule("number", true)).Add();
                                        col.Field("COD_CONTRATO_PROYECTO").Visible(false).HeaderText("COD_CONTRATO_PROYECTO").Format("{0:n0}").EditType(EditingType.NumericEdit).ValidationRules(v => v.AddRule("number", true)).Add();
                                        col.Field("COD_ROL").Width(200).HeaderText("COD_ROL").Type("String").ForeignKeyField("COD_ROL").AllowEditing(false).ForeignKeyValue("DESCRIPCION").DataSource((IEnumerable<object>)new syncfusion_payc.Models.test_payc_contabilidadEntities().ROLES.ToList()).HeaderText("ROL").Add();
                                        col.Field("NOMBRE_PERSONA").Width(200).HeaderText("NOMBRES").Add();
                                        
                                        col.Field("COD_FORMAS_PAGO_FECHAS").HeaderText("COD_FORMAS_PAGO_FECHAS").Type("String").ForeignKeyField("COD_FORMAS_PAGO_FECHA").ForeignKeyValue("FECHA_FORMA_PAGO").DataSource((IEnumerable<object>)new syncfusion_payc.Models.test_payc_contabilidadEntities().FORMAS_PAGO_FECHAS.ToList()).Visible(false).EditType(EditingType.NumericEdit).Add();
                                        
                                        col.Field("VALOR_SIN_IMPUESTOS").Width(150).Format("{0:c2}").HeaderText("SIN IMPUESTOS ($)").Add();
                                        col.Field("ADICIONES").Width(120).Format("{0:c2}").HeaderText("ADICIONES ($)").Add();
                                        col.Field("DESCUENTO_AUSENCIA").Width(120).Format("{0:c2}").HeaderText("AUSENCIA ($)").Add();
                                        col.Field("VALOR_DIAS_LAB").Width(120).Format("{0:c2}").HeaderText("DIAS LAB ($)").Add();
                                        col.Field("HORAS_ED").Width(120).HeaderText("HORAS ED (h)").Add();
                                        col.Field("HORAS_EN").Width(120).HeaderText("HORAS EN (h)").Add();
                                        col.Field("HORAS_FD").Width(120).HeaderText("HORAS FD (h)").Add();
                                        col.Field("HORAS_FN").Width(120).HeaderText("HORAS FN (h)").Add();
                                        
                                        col.Field("HORAS_AUSENCIA").Width(120).HeaderText("AUSENCIAS (h)").Add();
                                        
                                        col.Field("FECHA_INI").HeaderText("FECHA INI COLABORADOR").Format("{0:dd/MM/yyyy}").EditType(EditingType.DateTimePicker).Add();
                                        col.Field("FECHA_FIN").HeaderText("FECHA FIN COLABORADOR").Format("{0:dd/MM/yyyy}").EditType(EditingType.DateTimePicker).Add();
                                        
                                        col.Field("FECHA_INICIO_EJECUCION").HeaderText("FECHA INICIO EJECUCION").Format("{0:dd/MM/yyyy}").EditType(EditingType.DateTimePicker).Add();
                                        col.Field("FECHA_FIN_EJECUCION").HeaderText("FECHA FIN EJECUCION").Format("{0:dd/MM/yyyy}").EditType(EditingType.DateTimePicker).Add();

                                    }).ChildGrid(child =>
                                    {
                                        child.Datasource(ds => ds.URL("../../VISTA_DETALLE_ADJUNTOS_PERS/GetOrderData_novedades").Adaptor(AdaptorType.UrlAdaptor))
                                        .AllowPaging()
                                        .QueryString("COD_CONTRATO_PROYECTO")
                                        .AllowFiltering(true)
                                        //.AllowCellMerging(true)
                                        .Locale("es-CO")
                                        //.AllowRowDragAndDrop(false)
                                        .AllowResizeToFit(true)
                                        //.AllowScrolling(true)
                                        .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
                                        //.ClientSideEvents(eve => eve.ToolbarClick("clicked"))
                                        .EditSettings(edit => { edit.AllowAdding(false).AllowDeleting(false).AllowEditing(false).EditMode(EditMode.Dialog); })
                                        .ClientSideEvents(e => e.ActionBegin("inicio_grid").Load("childLoad"))

                                        .ToolbarSettings(toolbar =>
                                        {
                                            toolbar.ShowToolbar().ToolbarItems(items =>
                                            {
                                                items.AddTool(ToolBarItems.Add);
                                                items.AddTool(ToolBarItems.Edit);
                                                items.AddTool(ToolBarItems.Delete);
                                                items.AddTool(ToolBarItems.Update);
                                                items.AddTool(ToolBarItems.Cancel);
                                            });

                                        })
                                        .Columns(col =>
                                        {
                                            col.Field("COD_COLABORADOR").Visible(false).ForeignKeyField("COD_COLABORADOR").Type("string").ForeignKeyValue("DESCRIPCION").DataSource((IEnumerable<object>)new syncfusion_payc.Models.test_payc_contabilidadEntities().COLABORADORES.ToList()).ValidationRules(v => v.AddRule("required", true)).HeaderText("COLABORADOR").EditType(EditingType.DropdownEdit).Add();
                                            col.Field("COD_CONTRATO_PROYECTO").Visible(false).Visible(false).AllowEditing(false).ForeignKeyField("COD_CONTRATO_PROYECTO").ForeignKeyValue("DESCRIPCION").DataSource((IEnumerable<object>)new syncfusion_payc.Models.test_payc_contabilidadEntities().CONTRATO_PROYECTO_DESCRIPCION.ToList()).HeaderText("CONTRATO_PROYECTO").EditType(EditingType.DropdownEdit).Add();
                                            col.Field("COD_TIPO_NOVEDAD").Width(120).ForeignKeyField("COD_TIPO_NOVEDAD").Type("string").ForeignKeyValue("DESCRIPCION").DataSource((IEnumerable<object>)new syncfusion_payc.Models.test_payc_contabilidadEntities().TIPOS_NOVEDAD.ToList()).HeaderText("TIPO_NOVEDAD").ValidationRules(v => v.AddRule("required", true)).EditType(EditingType.DropdownEdit).Add();
                                            col.Field("COD_REGISTRO_NOVEDADES").Width(120).HeaderText("REGISTRO_NOVEDADES").IsPrimaryKey(true).Visible(false).Format("{0:n0}").EditType(EditingType.NumericEdit).ValidationRules(v => v.AddRule("number", true)).Add();
                                            col.Field("FECHA_INICIO_NOVEDAD").Width(120).HeaderText("FECHA INICIO NOVEDAD").Format("{0:dd/MM/yyyy HH:mm}").ValidationRules(v => v.AddRule("required", true)).EditType(EditingType.DateTimePicker).Add();
                                            col.Field("FECHA_FIN_NOVEDAD").Width(120).HeaderText("FECHA FIN NOVEDAD").Format("{0:dd/MM/yyyy HH:mm}").ValidationRules(v => v.AddRule("required", true).AddRule("comparacion_fechas", true)).EditType(EditingType.DateTimePicker).Add();
                                            col.Field("COD_FORMAS_PAGO_FECHAS").Visible(false).HeaderText("COD_FORMAS_PAGO_FECHAS").Type("String").ForeignKeyField("COD_COD_FORMAS_PAGO_FECHA").ForeignKeyValue("FECHA_FORMA_PAGO").DataSource((IEnumerable<object>)new syncfusion_payc.Models.test_payc_contabilidadEntities().FORMAS_PAGO_FECHAS.ToList()).EditType(EditingType.NumericEdit).Add();
                                        });
                                    }))
        </div>
        <input type="hidden" id="h_vlr_sin_impu" value="">  @**@
    </div>

</div>

<!--FILA TOTAL - NO VA POR AHORA-->
<!--<div class="row">
    <div class="col-md-12">
        <table class="col-md-12">

            <tbody>
                <tr class="fila_total">
                    <th class="titulo_total"><b>Total</b></th>
                    <th class="total"><span class="valor">@(ViewBag.TOTAL_FACTURA == null ? "" : Html.Raw((String)ViewBag.TOTAL_FACTURA.ToString()).ToString())</span></th>
                </tr>
            </tbody>
        </table>
    </div>
</div>-->
<!--FILA BOTONES-->
<!--<div class="row">
    <div class="col-md-6">
        <input type="button" value="Validar" class="btn btn-purple" onclick="validar_factura()" />
    </div>
</div>-->

<script type="text/javascript">
    //Traducción
    $(document).ready(function () {
        ej.Grid.Locale["es-CO"] = {
            EmptyRecord: "No hay registros que mostrar",
            GroupDropArea: "Arrastre un encabezado de columna aquí para agrupar su columna",
            DeleteOperationAlert: "No hay registros seleccionados para la operación de eliminación",
            EditOperationAlert: "No hay registros seleccionados para la operación de edición",
            SaveButton: "Guardar",
            OKButton: "DE ACUERDO",
            CancelButton: "Cancelar",
            EditFormTitle: "Detalles de ",
            AddFormTitle: "Añadir nuevo registro",
            GroupCaptionFormat: "{{:headerText}}: {{:key}} - {{:count}} {{if count == 1 }} ítem {{else}} artículos {{/if}} ",


        };
        ej.Pager.Locale["es-CO"] = {
            pagerInfo: "{0} de {1} páginas ({2} artículos)",
            firstPageTooltip: "Ir a la primera página",
            lastPageTooltip: "Ir a la última página",
            nextPageTooltip: "Ir a la página siguiente",
            previousPageTooltip: "Ir a la página anterior",
            nextPagerTooltip: "Ir al siguiente Pager",
            previousPagerTooltip: "Ir a Pager anterior"
        };

        ej.ExcelFilter.Locale["es-CO"] = {
            SortNoSmaller: "Ordenar de menor a mayor",
            SortNoLarger: "Ordenar de mayor a menor",
            SortTextAscending: "Ordenar de A a Z",
            SortTextDescending: "Ordenar de Z a A",
            SortDateOldest: "Ordenar por Más antiguos",
            SortDateNewest: "Ordenar por Más reciente",
            SortByColor: "Ordenar por color",
            SortByCellColor: "Ordenar por color de la célula",
            SortByFontColor: "Ordenar por Color de fuente",
            FilterByColor: "Filtrar por color",
            CustomSort: "Orden personalizado",
            FilterByCellColor: "Filtrar por color de la célula",
            FilterByFontColor: "Filtrar por color de fuente",
            ClearFilter: "Borrar filtro",
            NumberFilter: "Número Filtros",
            GuidFilter: "Gud Filtros",
            TextFilter: "Filtros de texto",
            DateFilter: "Filtros de fecha",
            DateTimeFilter: "Fecha filtros de tiempo",
            SelectAll: "Seleccionar todo",
            Blanks: "Los espacios en blanco",
            Search: "Buscar",
            Showrowswhere: "Mostrar filas",
            NumericTextboxWaterMark: "introducir el valor",
            StringMenuOptions: [{ text: "Igual", value: "equal" }, { text: "No es equal", value: "notequal" }, { text: "Comienza con", value: "startswith" }, { text: "Termina con", value: "endswith" }, { text: "contiene", value: "contains" }, { text: "Filtro personalizado", value: "customfilter" },],
            NumberMenuOptions: [{ text: "Igual", value: "equal" }, { text: "No es equal", value: "notequal" }, { text: "Menos que", value: "lessthan" }, { text: "Menor o equal", value: "lessthanorequal" }, { text: "Mas grande que", value: "greaterthan" }, { text: "Mayor que o equal", value: "greaterthanorequal" }, { text: "Entre", value: "between" }, { text: "Filtro personalizado", value: "customfilter" },],
            GuidMenuOptions: [{ text: "Igual", value: "equal" }, { text: "No es equal", value: "notequal" }, { text: "Filtro personalizado", value: "customfilter" },],
            DateMenuOptions: [{ text: "Igual", value: "equal" }, { text: "No es equal", value: "notequal" }, { text: "Menos que", value: "lessthan" }, { text: "Menor o equal", value: "lessthanorequal" }, { text: "Mas grande que", value: "greaterthan" }, { text: "Mayor que o equal", value: "greaterthanorequal" }, { text: "Entre", value: "between" }, { text: "Filtro personalizado", value: "customfilter" },],
            DatetimeMenuOptions: [{ text: "Igual", value: "equal" }, { text: "No es equal", value: "notequal" }, { text: "Menos que", value: "lessthan" }, { text: "Menor o equal", value: "lessthanorequal" }, { text: "Mas grande que", value: "greaterthan" }, { text: "Mayor que o equal", value: "greaterthanorequal" }, { text: "Entre", value: "between" }, { text: "Filtro personalizado", value: "customfilter" },],
            Top10MenuOptions: [{ text: "Parte superior", value: "top" }, { text: "Fondo", value: "bottom" },],
            title: "Filtro personalizado",
            PredicateAnd: "Y",
            PredicateOr: "O",
            Ok: "Aceptar",
            MatchCase: "Coincidencia",
            Cancel: "Cancelar",
            NoResult: "No se encontraron coincidencias",
            CheckBoxStatusMsg: "No todos los elementos que muestran",
            DatePickerWaterMark: "Seleccione fecha",
            DateTimePickerWaterMark: "Seleccionar fecha y hora",
            True: "cierto",
            False: "falso"
        };
    });


    //Función que se ejecuta en el evento load
    function inicio_grid_items(args) {

        var cod_contrato_proyecto = "@(ViewBag.COD_CONTRATO_PROYECTO == null ? "" : Html.Raw((String)ViewBag.COD_CONTRATO_PROYECTO.ToString()).ToString())";
        if (cod_contrato_proyecto != "") {
            this.model.filterSettings.filteredColumns.push({ field: "COD_CONTRATO_PROYECTO", operator: "equal", value: cod_contrato_proyecto });
        }
        var COD_FACTURA = "@(ViewBag.COD_FACTURA == null ? "" : Html.Raw((String)ViewBag.COD_FACTURA.ToString()).ToString())";
        if (COD_FACTURA != "") {
            this.model.filterSettings.filteredColumns.push({ field: "COD_FACTURA", operator: "equal", value: COD_FACTURA });
        }
        var COD_FORMAS_PAGO_FECHAS = "@(ViewBag.COD_FORMAS_PAGO_FECHAS == null ? "" : Html.Raw((String)ViewBag.COD_FORMAS_PAGO_FECHAS.ToString()).ToString())";
        if (COD_FORMAS_PAGO_FECHAS != "") {
            this.model.filterSettings.filteredColumns.push({ field: "COD_FORMAS_PAGO_FECHAS", operator: "equal", value: COD_FORMAS_PAGO_FECHAS });
        }
        var COD_ESTADO_DETALLE = "1";
        if (COD_ESTADO_DETALLE != "") {
            this.model.filterSettings.filteredColumns.push({ field: "COD_ESTADO_DETALLE", operator: "equal", value: COD_ESTADO_DETALLE});
        }

        refrescar_total();
    }

    //Función que se ejecuta al inicio de las acciones
    function inicio_accion_items(args) {

    }

    //Función que se ejecuta en el evento load
    function inicio_grid_roles(args) {
        var cod_contrato_proyecto = "@(ViewBag.COD_CONTRATO_PROYECTO == null ? "" : Html.Raw((String)ViewBag.COD_CONTRATO_PROYECTO.ToString()).ToString())";
        if (cod_contrato_proyecto != "") {
            this.model.filterSettings.filteredColumns.push({ field: "COD_CONTRATO_PROYECTO", operator: "equal", value: cod_contrato_proyecto });
        }
        var COD_FACTURA = "@(ViewBag.COD_FACTURA == null ? "" : Html.Raw((String)ViewBag.COD_FACTURA.ToString()).ToString())";
        if (COD_FACTURA != "") {
            this.model.filterSettings.filteredColumns.push({ field: "COD_FACTURA", operator: "equal", value: COD_FACTURA });
        }

    }

    //Función click en los elementos nuevos
    function clicked(sender) {
        var cod_contrato_proyecto = "@(ViewBag.COD_CONTRATO_PROYECTO == null ? "" : Html.Raw((String)ViewBag.COD_CONTRATO_PROYECTO.ToString()).ToString())";
        var cod_factura =@(ViewBag.COD_FACTURA == null ? "" : Html.Raw((String)ViewBag.COD_FACTURA.ToString()).ToString());
        var estado_factura = "@(ViewBag.ESTADO_FACTURA == null ? "" : Html.Raw((String)ViewBag.ESTADO_FACTURA.ToString()).ToString())"; 
        $(".contenedor_loader1").show();
        //Exportación a excel
        if (sender.itemName == "Excel Export") {
            var grid = $('#Grid_Adjunto').ejGrid('instance');
            if (estado_factura == "1" || estado_factura == "2") {
                alert("La factura no ha sido enviada a PSL, y por lo tanto, no esta habilitada para la generación del archivo adjunto.");
            }
            else {
                var data = JSON.stringify({ gridModel: JSON.stringify(grid.model), COD_FACTURA: parseInt(cod_factura), COD_CONTRATO_PROYECTO: cod_contrato_proyecto });
                var url = "../../VISTA_DETALLE_ADJUNTOS_PERS/ExcelExport";
                $.ajax({
                    type: "POST",
                    url: url,
                    data: data,
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    dataFilter: function (data) { return data; },
                    success: function (data) {
                        var url = "../../VISTA_DETALLE_ADJUNTOS_PERS/adjuntosfactura/Adjunto_" + data.result + ".xlsx";
                        var win = window.open(url, '_blank');
                        win.focus();
                        $(".contenedor_loader1").hide();
                    },
                    error: function (data) {
                        alert("Ha ocurrido un error inesperado. Por favor vuelva a intentarlo. Si el problema persiste, contacte al administrador del sistema.")
                        $(".contenedor_loader1").hide();
                    }

                });
            }

        }
    }
    function validar_factura() {
        var cod_contrato_proyecto = "@(ViewBag.COD_CONTRATO_PROYECTO == null ? "" : Html.Raw((String)ViewBag.COD_CONTRATO_PROYECTO.ToString()).ToString())";
        var cod_factura = "@(ViewBag.COD_FACTURA == null ? "" : Html.Raw((String)ViewBag.COD_FACTURA.ToString()).ToString())";
        var cod_formas_pago_fechas = "@(ViewBag.COD_FORMAS_PAGO_FECHAS == null ? "" : Html.Raw((String)ViewBag.COD_FORMAS_PAGO_FECHAS.ToString()).ToString())";
        var data = JSON.stringify({ COD_CONTRATO_PROYECTO: parseInt(cod_contrato_proyecto), COD_FACTURA: parseInt(cod_factura), COD_FORMAS_PAGO_FECHAS: parseInt(cod_formas_pago_fechas) });
        var estado_factura = "@(ViewBag.ESTADO_FACTURA == null ? "" : Html.Raw((String)ViewBag.ESTADO_FACTURA.ToString()).ToString())";
        //alert(estado_factura);
        if (estado_factura == "1" || estado_factura == "2") {
            var url = "../validar_factura";
            $.ajax({
                type: "POST",
                url: url,
                data: data,
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                dataFilter: function (data) { return data; },
                success: function (data) {
                    if (data.responseText == "SI") {
                        alert("Existen errores en los valores a facturar, por favor verifique que todos los elementos estan asociados a un concepto de PSL");
                    }
                    else {
                        alert("Factura verificada con éxito");
                        window.location = "../Index";
                    }
                }
            });
        }
        else {
            alert("Error al verificar. La factura no se encuentra pendiente de envío a PSL o de revisión.")
        }
    }

    //Función que refresca la grid hijo de facturas después
    function finalizar_accion(args) {
        if (args.requestType == "save") {
            refrescar_total();
        }
    }

    //Funcion para refrescar total
    function refrescar_total() {
        var cod_factura =@(ViewBag.COD_FACTURA == null ? "" : Html.Raw((String)ViewBag.COD_FACTURA.ToString()).ToString());
        var data = JSON.stringify({ COD_FACTURA: parseInt(cod_factura) });
        var url = "../refrescar_total";
        $.ajax({
            type: "POST",
            url: url,
            data: data,
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            dataFilter: function (data) { return data; },
            success: function (data) {
                $('.valor').text(data.responseText);
            }
        });

    }

    // Obtener valor a facturar inicial R.E.V.
    function inicio_accion_roles(args) {
        if (args.requestType == "beginedit") {

            // Create grid object.
            var gridObj = $("#GRID_ROLES").ejGrid("instance");
            // Gets the selected row element list
            var vlr = gridObj.getSelectedRecords()[0].VALOR_SIN_IMPUESTOS;

            // Poner en un input hidden
            document.getElementById("h_vlr_sin_impu").value = vlr;
        }
    }
    // Obtener valor a facturar inicial ITEMS R.E.V.
    function inicio_accion_items(args) {
        if (args.requestType == "beginedit") {
            //window.alert("Entro en: inicio_accion_items");
            // Create grid object.
            var gridObj = $("#GRID_ITEMS").ejGrid("instance");
            // Gets the selected row element list
            var vlr = gridObj.getSelectedRecords()[0].VALOR_SIN_IMPUESTOS;
            //window.alert("VALOR_SIN_IMPUESTOS - inicio_accion_roles:" + vlr);
            // Poner en un input hidden
            document.getElementById("h_vlr_sin_impu").value = vlr;
        }
    }

    //Funciones de validación JQUERY VALIDATION
    $(function () {
        //Adicionar a jquery VALIDATION, la revisión del concepto para GRID_ROLES
        $.validator.addMethod("validar_concepto_roles", function (value, element, params) {
            var cod_concep = $("#GRID_ROLESCOD_CONCEPTO_PSL_input").val(); // Valor q viene de la grid
            //window.alert("cod_concep: " + cod_concep);
            return cod_concep != null && cod_concep != 0 && cod_concep != "";
        }, "Se debe seleccionar algún concepto.");

        //Adicionar a jquery VALIDATION, la revisión del valor a facturar(sin impuestos) para GRID_ROLES
        $.validator.addMethod("validacion_causa", function (value, element, params) {
            var vr_sin_impu = 0; var vr_sin_impu_antes = 0; var causa = 0;
            vr_sin_impu = $("#GRID_ROLESVALOR_SIN_IMPUESTOS").val();
            //window.alert("Valor en la GRID: " + vr_sin_impu);
            vr_sin_impu_antes = document.getElementById("h_vlr_sin_impu").value.replace(".",",");
            //window.alert("Ultimo valor sin imp ANTES: " + vr_sin_impu_antes);
            causa = $("#GRID_ROLESCOD_CAUSA_ESTADO").val(); //;
            if ((vr_sin_impu_antes != vr_sin_impu) && (causa == null || causa == 0 || causa == 1)) { return false }
            else { return true };
        }, "El valor a facturar cambió, por lo tanto se debe indicar la CAUSA por la cual se modificó el valor.");

        //Adicionar a jquery VALIDATION, la revisión del concepto para GRID_ITEMS
        $.validator.addMethod("validar_concepto_items", function (value, element, params) {
            var cod_concep = $("#GRID_ITEMSCOD_CONCEPTO_PSL_input").val(); // Valor q viene de la grid
            //window.alert("cod_concep: " + cod_concep);
            return cod_concep != null && cod_concep != 0 && cod_concep != "";
        }, "Se debe seleccionar algún concepto.");

        //Adicionar a jquery VALIDATION, la revisión del valor a facturar(sin impuestos) para GRID_ITEMS
        $.validator.addMethod("validacion_causa_items", function (value, element, params) {
            var vr_sin_impu = 0; var vr_sin_impu_antes = 0; var causa = 0;
            vr_sin_impu = $("#GRID_ITEMSVALOR_SIN_IMPUESTOS").val();
            //window.alert("Valor en la GRID: " + vr_sin_impu);
            vr_sin_impu_antes = document.getElementById("h_vlr_sin_impu").value.replace(".", ",");
            //window.alert("Ultimo valor sin imp ANTES: " + vr_sin_impu_antes);
            causa = $("#GRID_ITEMSCOD_CAUSA_ESTADO").val(); //;
            if ((vr_sin_impu_antes != vr_sin_impu) && (causa == null || causa == 0 || causa == 1)) { return false }
            else { return true };
        }, "El valor a facturar cambió, por lo tanto se debe indicar la CAUSA por la cual se modificó el valor.");

    });
        
    //Función para cargar los atributos necesarios para el filtrado de la grid hijo
    function childLoad(args) {
        //temporal = args;
        var colaborador = args.model.parentDetails.parentRowData.COD_COLABORADOR;
        console.log(colaborador);
        args.model.filterSettings.filteredColumns.push({ field: "COD_COLABORADOR", operator: "equal", value: colaborador });
        var fechas = args.model.parentDetails.parentRowData.COD_FORMAS_PAGO_FECHAS;
        console.log(fechas);
        //args.model.filterSettings.filteredColumns.push({ field: "COD_FORMAS_PAGO_FECHAS", operator: "equal", value: fechas });
    }
</script>