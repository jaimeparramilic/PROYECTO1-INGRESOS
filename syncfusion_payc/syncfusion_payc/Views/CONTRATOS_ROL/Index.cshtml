
@model IEnumerable<syncfusion_payc.Models.CONTRATOS_ROL>

@{
    ViewBag.Title = "";


    
	}
<h4>CONTRATOS ROL</h4>

<div class="control-section">

    @(Html.EJ().Grid<syncfusion_payc.Models.CONTRATO_COLABORADOR_INDEX>
    ("Grid")
    .Datasource(ds => ds.URL("../CONTRATO_COLABORADOR/GetOrderData_contrato_proyecto").InsertURL("../CONTRATO_COLABORADOR/PerformInsert_contrato_proyecto").UpdateURL("../CONTRATO_COLABORADOR/PerformUpdate_contrato_proyecto").RemoveURL("../CONTRATO_COLABORADOR/PerformDelete").Adaptor(AdaptorType.UrlAdaptor))
    .AllowPaging()
    .AllowFiltering()
    .Locale("es-CO")
    .AllowResizeToFit(true)
    .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
    .ToolbarSettings(toolbar =>
    {
    toolbar.ShowToolbar().ToolbarItems(items =>
    {
    items.AddTool(ToolBarItems.Add);
    items.AddTool(ToolBarItems.Edit);
    items.AddTool(ToolBarItems.Delete);
    items.AddTool(ToolBarItems.Update);
    items.AddTool(ToolBarItems.Cancel);
    items.AddTool(ToolBarItems.Search);
    });
    }).Columns(col =>
    {
    col.Field("CENTRO_COSTOS").HeaderText("CENTRO DE COSTOS").EditType(EditingType.DropdownEdit).Add();
    col.Field("DESCRIPCION").HeaderText("DESCRIPCION").EditType(EditingType.DropdownEdit).Add();
    col.Field("COD_CONTRATO_PROYECTO").HeaderText("CONTRATO_PROYECTO").IsPrimaryKey(true).Visible(false).Format("{0:n0}").EditType(EditingType.NumericEdit);
    col.Field("COD_CONTRATO").HeaderText("CONTRATO_PROYECTO").Visible(false).Format("{0:n0}").EditType(EditingType.NumericEdit);
    }).ChildGrid(child =>
    {
    child.Datasource(ds => ds.URL("GetOrderData").InsertURL("PerformInsert").UpdateURL("PerformUpdate").RemoveURL("PerformDelete").Adaptor(AdaptorType.UrlAdaptor))
    .AllowPaging()
    .AllowFiltering(true)
    .AllowScrolling(true)
    .QueryString("COD_CONTRATO_PROYECTO")
    .ClientSideEvents(eve =>
    {
    eve.Create("create");
    })
    .Locale("es-CO")

    .FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
    .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.Dialog); })
    .ToolbarSettings(toolbar =>
    {
    toolbar.ShowToolbar().ToolbarItems(items =>
    {
    items.AddTool(ToolBarItems.Add);
    items.AddTool(ToolBarItems.Edit);
    items.AddTool(ToolBarItems.Delete);
    items.AddTool(ToolBarItems.Update);
    items.AddTool(ToolBarItems.Cancel);

    });

    }).Columns(col =>
    {
    col.Field("COD_CONTRATO_PROYECTO").AllowEditing(false).ForeignKeyField("COD_CONTRATO_PROYECTO").Type("string").ForeignKeyValue("DESCRIPCION").DataSource((IEnumerable<object>
        )new syncfusion_payc.Models.test_payc_contabilidadEntities().CONTRATO_PROYECTO_DESCRIPCION.ToList()).HeaderText("ORDEN SERVICIO").EditType(EditingType.DropdownEdit).Add();

        col.Field("COD_ROL").ForeignKeyField("COD_ROL").Type("string").ForeignKeyValue("DESCRIPCION").DataSource((IEnumerable<object>
            )new syncfusion_payc.Models.test_payc_contabilidadEntities().ROLES.ToList()).HeaderText("ROL").EditType(EditingType.DropdownEdit).ValidationRules(v => v.AddRule("valid_rol_duplicado", true)).Add();
            col.Field("COD_CONTRATO_ROL").HeaderText("CONTRATO_ROL").IsPrimaryKey(true).Visible(false) .Format("{0:n0}").EditType(EditingType.Numeric).ValidationRules(v => v.AddRule("number", true)).Add();
            col.Field("FECHA_INI").HeaderText("FECHA_INI").Format("{0:dd/MM/yyyy}").EditType(EditingType.DateTimePicker).Add();
            col.Field("MESES").HeaderText("MESES").Format("{0:n0}").EditType(EditingType.NumericEdit).ValidationRules(v => v.AddRule("number", true)).Add();
            col.Field("VALOR_MENSUAL_SIN_PRESTACIONES").HeaderText("VALOR_MENSUAL_SIN_PRESTACIONES").Format("{0:n2}").EditType(EditingType.Numeric).ValidationRules(v => v.AddRule("number", true)).Add();
            col.Field("PRESTACIONES").HeaderText("PRESTACIONES").Format("{0:n2}").EditType(EditingType.NumericEdit).ValidationRules(v => v.AddRule("number", true)).Add();
            col.Field("VALOR_MENSUAL_PRESTACIONES").HeaderText("VALOR_MENSUAL_PRESTACIONES").Format("{0:n2}").EditType(EditingType.Numeric).ValidationRules(v => v.AddRule("number", true)).Add();
            col.Field("FACTOR_MULTIPLICADOR").HeaderText("FACTOR_MULTIPLICADOR").Format("{0:n2}").EditType(EditingType.Numeric).ValidationRules(v => v.AddRule("number", true)).Add();
            col.Field("VALOR_MENSUAL_PRESTACIONES_MULTIPLICADOR").HeaderText("VALOR_MENSUAL_PRESTACIONES_MULTIPLICADOR").Format("{0:n2}").EditType(EditingType.Numeric).ValidationRules(v => v.AddRule("number", true)).Add();
            col.Field("DEDICACION").HeaderText("DEDICACION").Format("{0:n2}").EditType(EditingType.Numeric).ValidationRules(v => v.AddRule("number", true)).Add();
            col.Field("OBSERVACIONES").HeaderText("OBSERVACIONES").Add();

            }).ChildGrid(child1 =>
            {
            child1.Datasource(ds => ds.URL("../CONTRATO_ROL_CARGO/GetOrderData").InsertURL("../CONTRATO_ROL_CARGO/PerformInsert").UpdateURL("../CONTRATO_ROL_CARGO/PerformUpdate").RemoveURL("../CONTRATO_ROL_CARGO/PerformDelete").Adaptor(AdaptorType.UrlAdaptor))
            .AllowPaging()
            .QueryString("COD_CONTRATO_ROL")
            .Locale("es-CO")
            .AllowRowDragAndDrop(false)
            .AllowScrolling(false)
            .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.Normal); })
            .ClientSideEvents(e => e.ActionBegin("inicio_grid"))
            .ToolbarSettings(toolbar =>
            {
            toolbar.ShowToolbar().ToolbarItems(items =>
            {
            items.AddTool(ToolBarItems.Add);
            items.AddTool(ToolBarItems.Edit);
            items.AddTool(ToolBarItems.Delete);
            items.AddTool(ToolBarItems.Update);
            items.AddTool(ToolBarItems.Cancel);
            });
            }).Columns(col =>
            {
            col.Field("COD_CARGO").ForeignKeyField("COD_CARGO").ForeignKeyValue("DESCRIPCION_CARGO").DataSource((IEnumerable<object>
                )new syncfusion_payc.Models.test_payc_contabilidadEntities().CARGOS.ToList()).HeaderText("CARGO").ValidationRules(v => v.AddRule("required", true)).EditType(EditingType.DropdownEdit).Add();
                col.Field("COD_CONTRATO_ROL").ForeignKeyField("COD_CONTRATO_ROL").Visible(false).ForeignKeyValue("COD_CONTRATO_ROL").DataSource((IEnumerable<object>
                    )new syncfusion_payc.Models.test_payc_contabilidadEntities().CONTRATOS_ROL.ToList()).HeaderText("COD_CONTRATO_ROL").EditType(EditingType.DropdownEdit).Add();
                    col.Field("COD_CONTRATO_ROL_CARGO").HeaderText("COD_CONTRATO_ROL_CARGO").IsPrimaryKey(true).Visible(false).Format("{0:n0}").EditType(EditingType.NumericEdit).ValidationRules(v => v.AddRule("number", true)).Add();
                    });

                    });
                    }))

</div>


<script>
    
    $(document).ready(function () {
        ej.Grid.Locale["es-CO"] = {
            EmptyRecord: "No hay registros que mostrar",
            GroupDropArea: "Arrastre un encabezado de columna aquí para agrupar su columna",
            DeleteOperationAlert: "No hay registros seleccionados para la operación de eliminación",
            EditOperationAlert: "No hay registros seleccionados para la operación de edición",
            SaveButton: "Guardar",
            OKButton: "DE ACUERDO",
            CancelButton: "Cancelar",
            EditFormTitle: "Detalles de ",
            AddFormTitle: "Añadir nuevo registro",
            GroupCaptionFormat: "{{:headerText}}: {{:key}} - {{:count}} {{if count == 1 }} ítem {{else}} artículos {{/if}} ",
            
            
        };
        ej.Pager.Locale["es-CO"] = {
            pagerInfo: "{0} de {1} páginas ({2} artículos)",
            firstPageTooltip: "Ir a la primera página",
            lastPageTooltip: "Ir a la última página",
            nextPageTooltip: "Ir a la página siguiente",
            previousPageTooltip: "Ir a la página anterior",
            nextPagerTooltip: "Ir al siguiente Pager",
            previousPagerTooltip: "Ir a Pager anterior"
        };

        ej.ExcelFilter.Locale["es-CO"] = {
            SortNoSmaller: "Ordenar de menor a mayor",
            SortNoLarger: "Ordenar de mayor a menor",
            SortTextAscending: "Ordenar de A a Z",
            SortTextDescending: "Ordenar de Z a A",
            SortDateOldest: "Ordenar por Más antiguos",
            SortDateNewest: "Ordenar por Más reciente",
            SortByColor: "Ordenar por color",
            SortByCellColor: "Ordenar por color de la célula",
            SortByFontColor: "Ordenar por Color de fuente",
            FilterByColor: "Filtrar por color",
            CustomSort: "Orden personalizado",
            FilterByCellColor: "Filtrar por color de la célula",
            FilterByFontColor: "Filtrar por color de fuente",
            ClearFilter: "Borrar filtro",
            NumberFilter: "Número Filtros",
            GuidFilter: "Gud Filtros",
            TextFilter: "Filtros de texto",
            DateFilter: "Filtros de fecha",
            DateTimeFilter: "Fecha filtros de tiempo",
            SelectAll: "Seleccionar todo",
            Blanks: "Los espacios en blanco",
            Search: "Buscar",
            Showrowswhere: "Mostrar filas",
            NumericTextboxWaterMark: "introducir el valor",
            StringMenuOptions: [{ text: "Igual", value: "equal" }, { text: "No es equal", value: "notequal" }, { text: "Comienza con", value: "startswith" }, { text: "Termina con", value: "endswith" }, { text: "contiene", value: "contains" }, { text: "Filtro personalizado", value: "customfilter" },],
            NumberMenuOptions: [{ text: "Igual", value: "equal" }, { text: "No es equal", value: "notequal" }, { text: "Menos que", value: "lessthan" }, { text: "Menor o equal", value: "lessthanorequal" }, { text: "Mas grande que", value: "greaterthan" }, { text: "Mayor que o equal", value: "greaterthanorequal" }, { text: "Entre", value: "between" }, { text: "Filtro personalizado", value: "customfilter" },],
            GuidMenuOptions: [{ text: "Igual", value: "equal" }, { text: "No es equal", value: "notequal" }, { text: "Filtro personalizado", value: "customfilter" },],
            DateMenuOptions: [{ text: "Igual", value: "equal" }, { text: "No es equal", value: "notequal" }, { text: "Menos que", value: "lessthan" }, { text: "Menor o equal", value: "lessthanorequal" }, { text: "Mas grande que", value: "greaterthan" }, { text: "Mayor que o equal", value: "greaterthanorequal" }, { text: "Entre", value: "between" }, { text: "Filtro personalizado", value: "customfilter" },],
            DatetimeMenuOptions: [{ text: "Igual", value: "equal" }, { text: "No es equal", value: "notequal" }, { text: "Menos que", value: "lessthan" }, { text: "Menor o equal", value: "lessthanorequal" }, { text: "Mas grande que", value: "greaterthan" }, { text: "Mayor que o equal", value: "greaterthanorequal" }, { text: "Entre", value: "between" }, { text: "Filtro personalizado", value: "customfilter" },],
            Top10MenuOptions: [{ text: "Parte superior", value: "top" }, { text: "Fondo", value: "bottom" },],
            title: "Filtro personalizado",
            PredicateAnd: "Y",
            PredicateOr: "O",
            Ok: "Aceptar",
            MatchCase: "Coincidencia",
            Cancel: "Cancelar",
            NoResult: "No se encontraron coincidencias",
            CheckBoxStatusMsg: "No todos los elementos que muestran",
            DatePickerWaterMark: "Seleccione fecha",
            DateTimePickerWaterMark: "Seleccionar fecha y hora",
            True: "cierto",
            False: "falso"
        };
    });

    
        console.log("val");
        var isNull = function (val) {
            return val === undefined || val === null;
        };
        var toLowerCase = function (val) {
            return val ? val.toLowerCase ? val.toLowerCase() : val.toString().toLowerCase() : (val === 0 || val === false) ? val.toString() : "";
        };
        var b = {
            //set the customized filter operator 
            notcontains: function (actual, expected, ignoreCase) {
                if (ignoreCase)
                    return !(!isNull(actual) && !isNull(expected) && toLowerCase(actual).indexOf(toLowerCase(expected)) != -1);
                return !(!isNull(actual) && !isNull(expected) && actual.toString().indexOf(expected) != -1);
            }
        }
        //add the customized filter operator to default filters 
    //Funciones de validación JQUERY VALIDATION
    $(function () {
        // Validar que no se incluyan roles duplicados
        $.validator.addMethod("valid_rol_duplicado", function (value, element, params) {
            //window.alert("Entró a valid_rol_duplicado");
            // Create grid object. para CHILD
            // Traer id del CHILD
            var id = $(".e-detailcell").children().attr("id"); 
            var gridObj = $("#" + id).ejGrid("instance");
            var cont = gridObj.getCurrentViewData().length;
            if (cont == null) { cont = 0 };
            var rol_ingresa = $("#" + id+"COD_ROL").val();
            //window.alert("CONT: " + cont + "; rol_ingresa: " + rol_ingresa);
            if (cont > 0) {
                var datos = gridObj.getCurrentViewData();
                for (j = 1; cont; j++) {
                    if (j > cont) { break }
                    k = j - 1;
                    if (datos[k].COD_ROL == rol_ingresa) { return false }
                    //window.alert("k: " + k + "; ROL GUARD: " + datos[k].COD_ROL);
                };
            }
            return true;
        }, "El rol que está ingresando ya existe. No está permitido incluir roles duplicados");
    });
    
</script>
